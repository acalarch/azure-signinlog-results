[
    {
        "Error Code": "0",
        "Message": "No specific error message for this error code"
    },
    {
        "Error Code": "16000",
        "Message": "Either multiple user identities are available for the current request or selected account is not supported for the scenario.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "16001",
        "Message": "Active accounts must be logged out first."
    },
    {
        "Error Code": "16002",
        "Message": "Application requested to sign out of a user session which does not exist."
    },
    {
        "Error Code": "16003",
        "Message": "The user account does not exist in the directory or the user hasn't been explicitly added to the tenant. To sign into this application, the account must be added to the directory.",
        "Remediation": "Invite the user to the tenant, or ignore this error if the user isn't supposed to be a member of the tenant. This can be the case when someone is sent to a login URL for your tenant without being a member, or picks the wrong user account."
    },
    {
        "Error Code": "17001",
        "Message": "Protected credential key can not be decoded."
    },
    {
        "Error Code": "17002",
        "Message": "Credential key can not be protected."
    },
    {
        "Error Code": "17003",
        "Message": "User key ({keyType}) could not be provisioned."
    },
    {
        "Error Code": "17004",
        "Message": "Protected credential key can not be decoded."
    },
    {
        "Error Code": "18000",
        "Message": "Cannot decrypt auth ticket with key version '{version}'."
    },
    {
        "Error Code": "18001",
        "Message": "Cannot decrypt buffer because of a HMAC mismatch."
    },
    {
        "Error Code": "20001",
        "Message": "The sign-in response message does not contain an issued token.",
        "Remediation": "There's an issue with your federated identity provider. The WS-Federation response acquired from a federated identity provider has been successfully parsed, but it did not contain SAML 1.1 assertion issued for the user. Please contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "20002",
        "Message": "An error occurred while attempting to export Federation Metadata."
    },
    {
        "Error Code": "20012",
        "Message": "An error occurred when we tried to process a WS-Federation message. The message was invalid.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "20024",
        "Message": "Federation metadata retrieval failed after multiple retries."
    },
    {
        "Error Code": "20033",
        "Message": "The actual message content is runtime specific. Please see returned exception message for details.",
        "Remediation": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "20034",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "25008",
        "Message": "Unable to parse assertion."
    },
    {
        "Error Code": "26000",
        "Message": "The provided access grant requires interaction."
    },
    {
        "Error Code": "27000",
        "Message": "Error when processing DeviceAuthRedirect request."
    },
    {
        "Error Code": "28000",
        "Message": "Provided value for the input parameter scope is not valid because it contains more than one resource. Scope {scope} is not valid."
    },
    {
        "Error Code": "28001",
        "Message": "Provided request must include a 'scope' input parameter."
    },
    {
        "Error Code": "28002",
        "Message": "Provided value for the input parameter scope '{scope}' is not valid when requesting an access token. Please specify a valid scope."
    },
    {
        "Error Code": "28003",
        "Message": "Provided value for the input parameter scope cannot be empty when requesting an access token using the provided authorization code. Please specify a valid scope."
    },
    {
        "Error Code": "28004",
        "Message": "The provided value for the input parameter 'scope' exceeded the number of scopes allowed. The scope {scope} is not valid."
    },
    {
        "Error Code": "28005",
        "Message": "The provided value for the input parameter 'actionid' was invalid."
    },
    {
        "Error Code": "28006",
        "Message": "The provided value for the input parameter 'pageid' was invalid."
    },
    {
        "Error Code": "28007",
        "Message": "The parameters provided in the request are incorrect or missing."
    },
    {
        "Error Code": "29000",
        "Message": "Invalid signing key for SSH certificate"
    },
    {
        "Error Code": "29001",
        "Message": "User is missing UPN or email"
    },
    {
        "Error Code": "29002",
        "Message": "Missing Proof of Possession key"
    },
    {
        "Error Code": "29003",
        "Message": "Proof of Possession key is invalid"
    },
    {
        "Error Code": "29004",
        "Message": "Proof of Possession key type is not supported"
    },
    {
        "Error Code": "29005",
        "Message": "The token scenario {tokenScenario} is invalid."
    },
    {
        "Error Code": "29006",
        "Message": "Client is missing application principal ID (Client ID) in tenant {tenantId}"
    },
    {
        "Error Code": "29007",
        "Message": "The permission (scope) list {scopeListString} is missing user_impersonation"
    },
    {
        "Error Code": "29008",
        "Message": "The resource 'Microsoft Azure Linux Virtual Machine Sign-In' ({resourceUrl}) is required for SSH certificate token request"
    },
    {
        "Error Code": "29100",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "29200",
        "Message": "QR Code requested. Generate QR code and display on UX page for interactive sign-ins."
    },
    {
        "Error Code": "29201",
        "Message": "Invalid QR Code request. Client Id ({clientId}) or target client Id ({targetClientId}) is invalid."
    },
    {
        "Error Code": "29202",
        "Message": "Invalid scope and response_type request parameters. scope=qrcode can only be used with response_type=none."
    },
    {
        "Error Code": "29203",
        "Message": "Invalid target_client_id '{targetClientId}' argument value."
    },
    {
        "Error Code": "29204",
        "Message": "Failed to write QR Code token to Store."
    },
    {
        "Error Code": "29205",
        "Message": "Generated QR Code string has exceeded maximum supported length."
    },
    {
        "Error Code": "29206",
        "Message": "Invalid QR Code redemption request. Client Id ({clientId}) is invalid."
    },
    {
        "Error Code": "29207",
        "Message": "Error processing session data. QR Code is either invalid or expired."
    },
    {
        "Error Code": "29208",
        "Message": "Error processing session data. QR Code was already redeemed."
    },
    {
        "Error Code": "29210",
        "Message": "QR Code sign-in is disabled via user credential policy."
    },
    {
        "Error Code": "29211",
        "Message": "QR Code sign-in is not supported for passthrough users."
    },
    {
        "Error Code": "29212",
        "Message": "QR Code sign-in is not supported for consumer user scenarios."
    },
    {
        "Error Code": "40002",
        "Message": "The identity provider returned an error. The status returned was '{status}' and the message was '{message}'."
    },
    {
        "Error Code": "40003",
        "Message": "A required token was not emitted by an external Identity Provider."
    },
    {
        "Error Code": "40004",
        "Message": "A required token was not emitted by an external Identity Provider."
    },
    {
        "Error Code": "40005",
        "Message": "Invalid token received from external Identity Provider. Current time: {curTime}, expiry time of assertion {expTime}."
    },
    {
        "Error Code": "40008",
        "Message": "There was an unexpected error from the external identity provider.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "40009",
        "Message": "The identity provider returned an error.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "40010",
        "Message": "The identity provider has failed with a transient error.",
        "Remediation": "The application should retry the request. If there is still an issue, contact your identity provider."
    },
    {
        "Error Code": "40013",
        "Message": "Social IDP MicroService Federation disabled."
    },
    {
        "Error Code": "40014",
        "Message": "Federated Identity Provider is unavailable.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "40015",
        "Message": "The identity provider returned an error.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "40016",
        "Message": "The Identity Provider returned an error.",
        "Remediation": "There is an issue with your federated identity provider. Contact your identity provider to resolve this issue."
    },
    {
        "Error Code": "50000",
        "Message": "There was an error issuing a token or an issue with our sign-in service.",
        "Remediation": "If this persists, open a support ticket to resolve this issue: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-troubleshooting-support-howto"
    },
    {
        "Error Code": "50001",
        "Message": "The resource is disabled or the resource named could not be found. This can happen if the application has not been installed by the administrator of the tenant, or if the resource principal was not found in the directory or is invalid due to a typo.",
        "Remediation": "Check your app's code to ensure that you have specified the exact and correct resource URL for the resource you are trying to access. Please see the returned exception message for details."
    },
    {
        "Error Code": "50002",
        "Message": "This tenant isn't supported for this authentication method yet."
    },
    {
        "Error Code": "50003",
        "Message": "Certificate roll is in progress. Please retry the operation later.",
        "Remediation": "Check the resolutions outlined at https://docs.microsoft.com/azure/active-directory/application-sign-in-problem-federated-sso-gallery#certificate-or-key-not-configured. If you still see issues, contact the app owner or an app admin."
    },
    {
        "Error Code": "50004",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "50005",
        "Message": "User tried to log in to a device from a platform ({platform}) that's currently not supported through Conditional Access policy. Supported device platforms are: iOS, Android, Mac, and Windows flavors."
    },
    {
        "Error Code": "50006",
        "Message": "Signature verification failed because of an invalid signature.",
        "Remediation": "Check out the resolution outlined at https://docs.microsoft.com/azure/active-directory/application-sign-in-problem-federated-sso-gallery. If the issue persists, contact the application owner or application administrator."
    },
    {
        "Error Code": "50007",
        "Message": "Encryption certificate was not found in the directory."
    },
    {
        "Error Code": "50008",
        "Message": "The SAML token is invalid.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "50010",
        "Message": "Audience URI validation failed since no token audiences were configured.",
        "Remediation": "Contact the application owner for resolution."
    },
    {
        "Error Code": "50011",
        "Message": "The reply URL specified in the request does not match the reply URLs configured for the application: '{identifier}'. {detail}",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "50012",
        "Message": "Authentication failed.",
        "Remediation": "Ensure that the request is sent with the correct credentials and claims."
    },
    {
        "Error Code": "50013",
        "Message": "Assertion failed signature validation. Possibly because the token issuer doesn't match the API version within its valid time range, it's expired or malformed, or the refresh token in the assertion is not a primary refresh token.",
        "Remediation": "Application error. Contact the app developer and ask them to debug this issue."
    },
    {
        "Error Code": "50014",
        "Message": "The user's redemption is in a pending state. The guest user account is not fully created yet."
    },
    {
        "Error Code": "50015",
        "Message": "The user requires legal age group consent.",
        "Remediation": "This user was asked to provide their age due to legal requirements."
    },
    {
        "Error Code": "50016",
        "Message": "Invalid Argument Redirect ErrorCode value."
    },
    {
        "Error Code": "50017",
        "Message": "Validation of given certificate for certificate based authentication failed.",
        "Remediation": "Contact the tenant admin. Possible reasons for this error include: cannot find issuing certificate in trusted certificates list, unable to find expected CrlSegment, cannot find issuing certificate in trusted certificates list, delta CRL distribution point is configured without a corresponding CRL distribution point, unable to retrieve valid CRL segments because of a timeout issue, or unable to download CRL."
    },
    {
        "Error Code": "50020",
        "Message": "User account '{email}' from identity provider '{idp}' does not exist in tenant '{tenant}' and cannot access the application '{appId}'({appName}) in that tenant. The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account.",
        "Remediation": "A user was sent to a tenanted endpoint, and signed into an AAD account that doesn't exist in your tenant. If this user should be a member of the tenant, they should be invited via the B2B system. See here for details: https://docs.microsoft.com/azure/active-directory/b2b/add-users-administrator"
    },
    {
        "Error Code": "50023",
        "Message": "ClaimType '{claimType}' is reserved for system use."
    },
    {
        "Error Code": "50024",
        "Message": "Unable to decrypt client state."
    },
    {
        "Error Code": "50025",
        "Message": "The issuer name must be specified."
    },
    {
        "Error Code": "50027",
        "Message": "JWT token is invalid or malformed.",
        "Remediation": "Contact the application owner to fix the JWT their app is creating for authentication. This can occur for a variety of reasons: doesn't contain nonce claim or sub claim, subject identifier mismatch, duplicate claim in idToken claims, unexpected issuer, unexpected audience, not within its valid time range, or a token format issue."
    },
    {
        "Error Code": "50029",
        "Message": "The reply URI specified in the request contains invalid characters. Domain names of this form are not supported.",
        "Remediation": "Contact the developer to update their app and app registration to use a different URI."
    },
    {
        "Error Code": "50030",
        "Message": "One of forwardableOnBehalfOfOriginsAcceptedAudiencesList or ForwardableOnBehalfOfOriginsAcceptedPrecedingAppsList is not set. Both fields need to be filled for PFT OBO to be successful. These must be filled for multi-hop PFT OBO to be succesful.",
        "Remediation": "The application owner must update the app registration and provide both the app that sent the PFT and the original resource."
    },
    {
        "Error Code": "50032",
        "Message": "RSA key size {actualSize} is less than the minimum required {minSize} bits."
    },
    {
        "Error Code": "50033",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "50034",
        "Message": "The user account {identifier} does not exist in the {tenant} directory. To sign into this application, the account must be added to the directory.",
        "Remediation": "The user that attempted to sign in doesn't exist in this tenant. This can occur because the user mis-typed their username, or isn't in the tenant. An application may have chosen the wrong tenant to sign into, and the currently logged in user was prevented from doing so since they did not exist in your tenant. If this user should be able to log in, add them as a guest. See docs here: https://docs.microsoft.com/azure/active-directory/b2b/add-users-administrator"
    },
    {
        "Error Code": "50038",
        "Message": "The API version isn't supported."
    },
    {
        "Error Code": "50042",
        "Message": "The salt required to generate a pairwise identifier is missing in the principal.",
        "Remediation": "If this application has been recently registered, please wait for some time for the configuration to take effect, and then try again."
    },
    {
        "Error Code": "50043",
        "Message": "Unable to generate a pairwise identifier with more than one salt in principal."
    },
    {
        "Error Code": "50045",
        "Message": "The salt required to generate a pairwise identifier is malformed in principal."
    },
    {
        "Error Code": "50048",
        "Message": "Subject must match the issuer claim in the client assertion.",
        "Remediation": "Contact the developer to ensure that the JWT they generated for authentication has correct sub and iss claims. https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials"
    },
    {
        "Error Code": "50049",
        "Message": "Unknown or invalid instance.",
        "Remediation": "Application error - the login request was malformed and could not be matched with an existing authentication endpoint or instance."
    },
    {
        "Error Code": "50050",
        "Message": "The request is malformed: invalid format for '{name}' value.",
        "Remediation": "Contact the application owner."
    },
    {
        "Error Code": "50052",
        "Message": "The password entered exceeds the maximum length. Please reach out to your admin to reset the password.",
        "Remediation": "The user is unable to login because their password exceeds the permitted maximum length. They should contact their admin to reset the password. If SSPR is enabled for their tenant, they can reset their password by following the Forgot your password link."
    },
    {
        "Error Code": "50053",
        "Message": "The account is locked, you've tried to sign in too many times with an incorrect user ID or password.",
        "Remediation": "This error can be returned for two reasons - the sign in could have come from a malicious IP address, or the account was locked due to repeated sign-in attempts. Only one error code is used to prevent an attacker from distinguishing between the states. In your Azure AD tenant, you can distinguish between these states by looking at the specific sign-in log entry for this request. For accounts locked for too many attempts, see https://docs.microsoft.com/azure/active-directory/identity-protection/howto-unblock-user"
    },
    {
        "Error Code": "50054",
        "Message": "Looks like you entered your old password. Try again with your new one.",
        "Remediation": "The user needs to enter a new password, not one they previously used."
    },
    {
        "Error Code": "50055",
        "Message": "The password is expired.",
        "Remediation": "The user's password is expired, and therefore their login or session was ended. They will be offered the opportunity to reset it, or may ask an admin to reset it via https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-users-reset-password-azure-portal"
    },
    {
        "Error Code": "50056",
        "Message": "Invalid or missing password: password does not exist in the directory for this user.",
        "Remediation": "The user should be asked to enter their password again."
    },
    {
        "Error Code": "50057",
        "Message": "The user account is disabled.",
        "Remediation": "The user object in Active Directory backing this account has been disabled. An admin can re-enable this account through Powershell: https://docs.microsoft.com/powershell/module/addsadministration/enable-adaccount?view=win10-ps"
    },
    {
        "Error Code": "50058",
        "Message": "Session information is not sufficient for single-sign-on.",
        "Remediation": "This means that a user is not signed in. This is a common error that's expected when a user is unauthenticated and has not yet signed in. If this error is encountered in an SSO context where the user has previously signed in, this means that the SSO session was either not found or invalid. This error may be returned to the application if prompt=none is specified."
    },
    {
        "Error Code": "50059",
        "Message": "No tenant-identifying information found in either the request or implied by any provided credentials."
    },
    {
        "Error Code": "50060",
        "Message": "Unable to sign out."
    },
    {
        "Error Code": "50061",
        "Message": "Unable to complete signout. The request was invalid."
    },
    {
        "Error Code": "50062",
        "Message": "Signout request is unauthorized."
    },
    {
        "Error Code": "50068",
        "Message": "Signout failed. The initiating application is not a participant in the current session."
    },
    {
        "Error Code": "50069",
        "Message": "Signout failed. The request specified a name identifier of '{identifier}' which did not match the existing session(s)."
    },
    {
        "Error Code": "50070",
        "Message": "Signout failed. The request specified session indexes '{identifier}' which did not match the existing session(s)."
    },
    {
        "Error Code": "50071",
        "Message": "Signout request has expired."
    },
    {
        "Error Code": "50072",
        "Message": "Due to a configuration change made by your administrator, or because you moved to a new location, you must enroll in multi-factor authentication to access '{identifier}'.",
        "Remediation": "The user was presented options to provide contact options so that they can do MFA."
    },
    {
        "Error Code": "50074",
        "Message": "Strong Authentication is required.",
        "Remediation": "User needs to perform multi-factor authentication. There could be multiple things requiring multi-factor, e.g. Conditional Access policies, per-user enforcement, requested by client, among others."
    },
    {
        "Error Code": "50076",
        "Message": "Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access '{resource}'.",
        "Remediation": "User needs to perform multi-factor authentication. There could be multiple things requiring multi-factor, e.g. Conditional Access policies, per-user enforcement, requested by client, among others."
    },
    {
        "Error Code": "50077",
        "Message": "The administrator created a conditional access policy that requires the authenticator to be used to provide GPS location."
    },
    {
        "Error Code": "50078",
        "Message": "Presented multi-factor authentication has expired due to policies configured by your administrator, you must refresh your multi-factor authentication to access '{resource}'."
    },
    {
        "Error Code": "50079",
        "Message": "Due to a configuration change made by your administrator, or because you moved to a new location, you must enroll in multi-factor authentication to access '{identifier}'.",
        "Remediation": "Either a managed user needs to register security info to complete multi-factor authentication, or a federated user needs to get the multi-factor claim from the federated identity provider. There could be multiple things requiring multi-factor, e.g. Conditional Access policies, per-user enforcement, requested by client, among others."
    },
    {
        "Error Code": "50080",
        "Message": "Bad request received."
    },
    {
        "Error Code": "50081",
        "Message": "The administrator created a conditional access policy that requires GPS location."
    },
    {
        "Error Code": "50085",
        "Message": "Refresh token needs a social identity provider login.",
        "Remediation": "The user is being redirected to another IDP for reauthentication."
    },
    {
        "Error Code": "50087",
        "Message": "A transient error has occurred during strong authentication. Please try again."
    },
    {
        "Error Code": "50088",
        "Message": "Limit on telecom MFA calls reached. Please try again in a few minutes."
    },
    {
        "Error Code": "50089",
        "Message": "Authentication failed due to flow token expired.",
        "Remediation": "Expected - auth codes, refresh tokens, and sessions expire over time or are revoked by the user or an admin. The app will request a new login from the user."
    },
    {
        "Error Code": "50091",
        "Message": "Passed query string length exceeds supported limit."
    },
    {
        "Error Code": "50093",
        "Message": "Missing value for the SAML NameID."
    },
    {
        "Error Code": "50094",
        "Message": "Unknown source configured on the audience for the SAML NameID."
    },
    {
        "Error Code": "50095",
        "Message": "Unknown source configured on the audience for the SAML email claim."
    },
    {
        "Error Code": "50096",
        "Message": "Source configured on the audience for the SAML NameID is not compatible with the requested format."
    },
    {
        "Error Code": "50097",
        "Message": "Device authentication is required.",
        "Remediation": "This is not an error - this is an interrupt that triggers device authentication when required due to a Conditional Access policy or because the application or resource requested the device ID in a token. This code alone does not indicate a failure on your users part to sign in. The sign in logs may indicate that the device authentication challenge was passed succesfully or failed."
    },
    {
        "Error Code": "50098",
        "Message": "JWT body must contain '{field}'."
    },
    {
        "Error Code": "50099",
        "Message": "Invalid nonce."
    },
    {
        "Error Code": "50100",
        "Message": "There was an error transforming the claims for the token."
    },
    {
        "Error Code": "50101",
        "Message": "Unknown claims transformer '{name}' was specified for principal '{principalId}'."
    },
    {
        "Error Code": "50102",
        "Message": "Unable to load CustomClaimsTransformer '{type}' was specified for principal '{principalId}'."
    },
    {
        "Error Code": "50103",
        "Message": "There was an error transforming the claims for the token: {errorMessage}"
    },
    {
        "Error Code": "50105",
        "Message": "Your administrator has configured the application {appName} ('{appId}') to block users unless they are specifically granted ('assigned') access to the application.  The signed in user '{user}' is blocked because they are not a direct member of a group with access, nor had access directly assigned by an administrator. Please contact your administrator to assign access to this application.",
        "Remediation": "Assign the user to the app. See https://docs.microsoft.com/azure/active-directory/manage-apps/methods-for-assigning-users-and-groups and https://docs.microsoft.com/azure/active-directory/manage-apps/application-sign-in-problem-federated-sso-gallery#user-not-assigned-a-role"
    },
    {
        "Error Code": "50107",
        "Message": "The requested federation realm object '{name}' does not exist.",
        "Remediation": "Application error - the login request was malformed and could not be matched with an existing authentication endpoint or instance."
    },
    {
        "Error Code": "50108",
        "Message": "Claims transformation configuration could not be retrieved."
    },
    {
        "Error Code": "50109",
        "Message": "Claim transformation is unknown from configuration."
    },
    {
        "Error Code": "50111",
        "Message": "Unknown claim transformation was asked to be applied."
    },
    {
        "Error Code": "50117",
        "Message": "Failed to deserialize policy specified in the request's claim parameter."
    },
    {
        "Error Code": "50120",
        "Message": "Unknown credential type, issue with the JWT header."
    },
    {
        "Error Code": "50123",
        "Message": "Unknown claims transformation method '{method}' was specified for principal '{principalId}'."
    },
    {
        "Error Code": "50124",
        "Message": "Invalid regular expression configured for claims transformation for this application.",
        "Remediation": "Contact your tenant admin to fix the claims mapping configuration. See https://docs.microsoft.com/azure/active-directory/develop/active-directory-saml-claims-customization"
    },
    {
        "Error Code": "50125",
        "Message": "Sign-in was interrupted due to a password reset or password registration entry.",
        "Remediation": "User authentication was blocked because they need to provide password reset information. Their next interactive sign in will ask them for this, which the app should trigger next."
    },
    {
        "Error Code": "50126",
        "Message": "Error validating credentials due to invalid username or password.",
        "Remediation": "The user didn't enter the right credentials.  It's expected to see some number of these errors in your logs due to users making mistakes."
    },
    {
        "Error Code": "50127",
        "Message": "Client app is a MAM app and device is not registered.",
        "Remediation": "The user needs to install the broker app and work place join using the broker app in order to register the device."
    },
    {
        "Error Code": "50128",
        "Message": "No tenant-identifying information found in either the request or implied by any provided credentials."
    },
    {
        "Error Code": "50129",
        "Message": "The device is not workplace joined. Workplace join is required to register the device."
    },
    {
        "Error Code": "50130",
        "Message": "The claim value(s) '{value}' cannot be interpreted as known auth method(s)."
    },
    {
        "Error Code": "50131",
        "Message": "Device is not in required device state: {state}. Or, the request was blocked due to suspicious activity, access policy, or security policy decisions."
    },
    {
        "Error Code": "50132",
        "Message": "The session is not valid due the following reasons: password expiration or recent password change, SSO Artifact is invalid or expired, session is not fresh enough for application, or a silent sign-in request was sent but the user's session with Azure AD is invalid or has expired.",
        "Remediation": "Expected - auth codes, refresh tokens, and sessions expire over time or are revoked by the user or an admin. The app will request a new login from the user."
    },
    {
        "Error Code": "50133",
        "Message": "The session is not valid due to password expiration or recent password change.",
        "Remediation": "Expected - auth codes, refresh tokens, and sessions expire over time or are revoked by the user or an admin. The app will request a new login from the user."
    },
    {
        "Error Code": "50134",
        "Message": "Wrong data center. To authorize a request that was initiated by an app in the OAuth 2.0 device flow, the authorizing party must be in the same data center where the original request resides."
    },
    {
        "Error Code": "50135",
        "Message": "Password change is required due to account risk."
    },
    {
        "Error Code": "50136",
        "Message": "Single MSA session detected when requesting an MSA ticket."
    },
    {
        "Error Code": "50137",
        "Message": "Password needs to be changed due to security policy rule."
    },
    {
        "Error Code": "50138",
        "Message": "Invalid encryption key environment."
    },
    {
        "Error Code": "50139",
        "Message": "Session is invalid due to missing an external refresh token."
    },
    {
        "Error Code": "50140",
        "Message": "This occurred due to 'Keep me signed in' interrupt when the user was signing in.",
        "Remediation": "This is an expected part of the login flow, where a user is asked if they want to remain signed into this browser to make further logins easier. For more details, see https://techcommunity.microsoft.com/t5/Azure-Active-Directory/The-new-Azure-AD-sign-in-and-Keep-me-signed-in-experiences/td-p/128267"
    },
    {
        "Error Code": "50141",
        "Message": "Protected key is not intended for the authenticated user."
    },
    {
        "Error Code": "50142",
        "Message": "Password change is required due to a conditional access policy."
    },
    {
        "Error Code": "50143",
        "Message": "Session mismatch. The session is invalid because user tenant does not match the domain hint.",
        "Remediation": "The app attempted to sign in a user to the wrong tenant. They need to correctly track the tenant that they have signed the user into."
    },
    {
        "Error Code": "50144",
        "Message": "The user's Active Directory password has expired.",
        "Remediation": "Generate a new password for the user or have the user use the self-service reset tool to reset their password."
    },
    {
        "Error Code": "50146",
        "Message": "This application is required to be configured with an application-specific signing key. It is either not configured with one, or the key has expired or is not yet valid.",
        "Remediation": "Please contact the owner of the application."
    },
    {
        "Error Code": "50147",
        "Message": "Invalid size of the code challenge parameter.",
        "Remediation": "Contact the application owner to correct their use of the PKCE parameters."
    },
    {
        "Error Code": "50148",
        "Message": "The code_verifier does not match the code_challenge supplied in the authorization request for PKCE.",
        "Remediation": "Contact the application owner to correct their use of the PKCE parameters."
    },
    {
        "Error Code": "50149",
        "Message": "Invalid Code_Challenge_method parameter."
    },
    {
        "Error Code": "50150",
        "Message": "The provided credentials does not have a valid user consent approval information."
    },
    {
        "Error Code": "50155",
        "Message": "Device authentication failed."
    },
    {
        "Error Code": "50156",
        "Message": "Device tokens are not supported for V2 resource."
    },
    {
        "Error Code": "50157",
        "Message": "User redirection required for routing."
    },
    {
        "Error Code": "50158",
        "Message": "External security challenge not satisfied. User will be redirected to another page or authentication provider to satisfy additional authentication challenges.",
        "Remediation": "The user is required to satisfy additional requirements before finishing authentication, and was redirected to another page (such as terms of use or a third party MFA provider). This code alone does not indicate a failure on your users part to sign in. The sign in logs may indicate that this challenge was succesfully passed or failed."
    },
    {
        "Error Code": "50159",
        "Message": "Claims sent by external provider are not enough."
    },
    {
        "Error Code": "50161",
        "Message": "Failed to validate authorization url of external claims provider."
    },
    {
        "Error Code": "50162",
        "Message": "Claims transformation has timed out. This indicates too many or too complex transformations may have been configured for this application. A retry of the request may succeed. Otherwise, please contact your admin to fix the configuration."
    },
    {
        "Error Code": "50163",
        "Message": "Regular expression replacement for claims transformation has resulted in a claim which exceeds the size limit. Please contact your admin to fix the configuration."
    },
    {
        "Error Code": "50164",
        "Message": "The supplied access token was not issued for the purpose for which it is being used. Expected a token with purpose '{name}'."
    },
    {
        "Error Code": "50165",
        "Message": "The token encrypting algorithm '{algorithm}' requested by the application is not supported for this type of token. This indicates the application is misconfigured."
    },
    {
        "Error Code": "50166",
        "Message": "Request to External OIDC endpoint failed."
    },
    {
        "Error Code": "50167",
        "Message": "Invalid pop_jwk key."
    },
    {
        "Error Code": "50168",
        "Message": "The client is capable of utilizing the Windows 10 Accounts extension to perform SSO but no SSO token was found in the request or the token was expired. Request has been interrupted to attempt to pull an SSO token."
    },
    {
        "Error Code": "50169",
        "Message": "The realm '{realm}' is not a configured realm of the current service namespace."
    },
    {
        "Error Code": "50170",
        "Message": "The external controls mapping is missing."
    },
    {
        "Error Code": "50172",
        "Message": "External claims provider {provider} is not approved."
    },
    {
        "Error Code": "50173",
        "Message": "The provided grant has expired due to it being revoked, a fresh auth token is needed. The user might have changed or reset their password. The grant was issued on '{authTime}' and the TokensValidFrom date (before which tokens are not valid) for this user is '{validDate}'.",
        "Remediation": "Expected part of the token lifecycle - either an admin or a user revoked the tokens for this user, causing subsequent token refreshes to fail and require re-authentication. Have the user sign-in again."
    },
    {
        "Error Code": "50176",
        "Message": "Missing definition of external control: {controlId}."
    },
    {
        "Error Code": "50177",
        "Message": "User account '{user}' from identity provider '{idp}' does not exist in tenant '{tenant}' and cannot access the application '{appId}'({appName}) in that tenant. The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account.",
        "Remediation": "The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account."
    },
    {
        "Error Code": "50178",
        "Message": "User account '{user}' from identity provider '{idp}' does not exist in tenant '{tenant}' and cannot access the application '{appId}'({appName}) in that tenant. The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account.",
        "Remediation": "The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account."
    },
    {
        "Error Code": "50179",
        "Message": "Client_info is not supported for this user."
    },
    {
        "Error Code": "50180",
        "Message": "Integrated Windows Authentication is needed. Enable the tenant '{name}' for Seamless SSO."
    },
    {
        "Error Code": "50181",
        "Message": "Unable to validate the otp."
    },
    {
        "Error Code": "50182",
        "Message": "OTP is already expired."
    },
    {
        "Error Code": "50183",
        "Message": "Cannot lookup otp due to cache error."
    },
    {
        "Error Code": "50184",
        "Message": "No cache entry exist for the tenant/user."
    },
    {
        "Error Code": "50185",
        "Message": "Email OTP notification delivery failed."
    },
    {
        "Error Code": "50186",
        "Message": "Unpermitted realm."
    },
    {
        "Error Code": "50187",
        "Message": "Failed to perform device authentication."
    },
    {
        "Error Code": "50189",
        "Message": "The device code is not correctly formatted."
    },
    {
        "Error Code": "50190",
        "Message": "Region prefix to connection string mapping returned from settings is null."
    },
    {
        "Error Code": "50192",
        "Message": "Invalid request."
    },
    {
        "Error Code": "50193",
        "Message": "Internal use"
    },
    {
        "Error Code": "50194",
        "Message": "Application '{appId}'({appName}) is not configured as a multi-tenant application. Usage of the /common endpoint is not supported for such applications created after '{time}'. Use a tenant-specific endpoint or configure the application to be multi-tenant."
    },
    {
        "Error Code": "50196",
        "Message": "The server terminated an operation because it encountered a client request loop. Please contact your app vendor.",
        "Remediation": "Application error - the app is requesting too many tokens, indicating that it is not correctly coded. Ensure that the app is correctly caching refresh and access tokens to preserve bandwidth and reduce latency."
    },
    {
        "Error Code": "50197",
        "Message": "Sorry, we could not find the user, please sign-in again."
    },
    {
        "Error Code": "50199",
        "Message": "For security reasons, user confirmation is required for this request. Please repeat the request allowing user interaction."
    },
    {
        "Error Code": "50200",
        "Message": "Unpermitted external trusted realm."
    },
    {
        "Error Code": "50201",
        "Message": "This message prompt interrupt will be shown to the user during login when additional information should be provided to user."
    },
    {
        "Error Code": "50202",
        "Message": "User is not registered in the organization and must explicitly consent to the sign-in."
    },
    {
        "Error Code": "50203",
        "Message": "User has not registered the authenticator app and must register or snooze this notification."
    },
    {
        "Error Code": "50204",
        "Message": "External user has not consented to the privacy statement."
    },
    {
        "Error Code": "50205",
        "Message": "External user has consented to the privacy statement."
    },
    {
        "Error Code": "50206",
        "Message": "The user or administrator has not consented connecting to the target-device: '{identifier}'. Send an interactive authorization request for this user and target-machine."
    },
    {
        "Error Code": "51000",
        "Message": "{feature} is/are disabled."
    },
    {
        "Error Code": "51001",
        "Message": "Domain Hint must be present with On-Premises Security Identifier/ On-Premises UPN."
    },
    {
        "Error Code": "51002",
        "Message": "Access denied due to it's in deny user access block list."
    },
    {
        "Error Code": "51004",
        "Message": "The user account {identifier} does not exist in the {tenant} directory. To sign into this application, the account must be added to the directory.",
        "Remediation": "An application likely chose the wrong tenant to sign into, and the currently logged in user was prevented from doing so since they did not exist in your tenant. If this user should be able to log in, add them as a guest. See docs here: https://docs.microsoft.com/azure/active-directory/b2b/add-users-administrator"
    },
    {
        "Error Code": "51005",
        "Message": "Initiate gateway redirect.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "51006",
        "Message": "Integrated Windows Authentication is needed. The user signed in using session token that is missing wia claim. Prompt the user to sign in again."
    },
    {
        "Error Code": "51007",
        "Message": "The user account {identifier} does not exist in the {tenant} directory. The user will be added to the directory to sign into this application."
    },
    {
        "Error Code": "51008",
        "Message": "JIT user creation of {userType} is disabled."
    },
    {
        "Error Code": "52001",
        "Message": "LinkedIn AppFamily Service Principal is disabled."
    },
    {
        "Error Code": "52002",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "52003",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "52004",
        "Message": "The user or administrator has not consented to use the application with ID '{identifier}'{namePhrase}. Send an interactive authorization request for this user and resource."
    },
    {
        "Error Code": "52050",
        "Message": "Multiple users with same email have been found."
    },
    {
        "Error Code": "52051",
        "Message": "Timed-out while parsing extension property name."
    },
    {
        "Error Code": "53000",
        "Message": "Device is not in required device state: {state}. Conditional Access policy requires a compliant device, and the device is not compliant. The user must enroll their device with an approved MDM provider like Intune.",
        "Remediation": "Your administrator might have configured a conditional access policy that allows access to your organization's resources only from compliant devices. To be compliant, your device must be either joined to your on-premises Active Directory or joined to your Azure Active Directory.            More details available at https://docs.microsoft.com/azure/active-directory/active-directory-conditional-access-device-remediation"
    },
    {
        "Error Code": "53001",
        "Message": "Device is not in required device state: {state}. Conditional Access policy requires a domain joined device, and the device is not domain joined.",
        "Remediation": "Have the user use a domain joined device."
    },
    {
        "Error Code": "53002",
        "Message": "Device is not in required device state: {state}. The app used is not an approved app for Conditional Access.",
        "Remediation": "User needs to use one of the apps from the list of approved apps to use in order to get access."
    },
    {
        "Error Code": "53003",
        "Message": "Access has been blocked by Conditional Access policies. The access policy does not allow token issuance.",
        "Remediation": "If this is unexpected, see the conditional access policy that applied to this request in the Azure Portal."
    },
    {
        "Error Code": "53004",
        "Message": "Cannot configure multi-factor authentication methods due to suspicious activity."
    },
    {
        "Error Code": "53005",
        "Message": "Application needs to enforce Intune protection policies."
    },
    {
        "Error Code": "53006",
        "Message": "Authentication required from federated idP."
    },
    {
        "Error Code": "53007",
        "Message": "Authentication required from federated IDP.",
        "Remediation": "User was blocked from authentication because they need to be sent to the federated identity provider (ADFS, for example) to perform multi-factor authentication. On interactive sign-in requests, they will be sent to the federation provider to perform MFA."
    },
    {
        "Error Code": "53008",
        "Message": "Browser not supported."
    },
    {
        "Error Code": "53009",
        "Message": "Application needs to enforce Intune protection policies."
    },
    {
        "Error Code": "53010",
        "Message": "Cannot configure multi-factor authentication methods because the organization requires this information to be set from specific locations or devices."
    },
    {
        "Error Code": "53011",
        "Message": "User blocked due to risk on home tenant."
    },
    {
        "Error Code": "54000",
        "Message": "User is not allowed to access application {appName} due to Legal Age Group Requirement of application {audience}."
    },
    {
        "Error Code": "54005",
        "Message": "OAuth2 Authorization code was already redeemed, please retry with a new valid code or use an existing refresh token."
    },
    {
        "Error Code": "54006",
        "Message": "Unencrypted v2 access tokens are not supported for first party applications that support consumer accounts. The resource must add a certificate to the onboarding portal to encrypt tokens."
    },
    {
        "Error Code": "54007",
        "Message": "Method not supported for IDP OAuth2 Federation."
    },
    {
        "Error Code": "54008",
        "Message": "Multi-Factor authentication is required and the credential used ({credentialName}) is not supported as a First Factor. Contact your administrator for more information."
    },
    {
        "Error Code": "60007",
        "Message": "X509Certificate does not expose a private key or isn't an RSA private key."
    },
    {
        "Error Code": "65001",
        "Message": "The user or administrator has not consented to use the application with ID '{identifier}'{namePhrase}. Send an interactive authorization request for this user and resource."
    },
    {
        "Error Code": "65002",
        "Message": "Consent between first party application '{applicationId}' and first party resource '{resourceId}' must be configured via preauthorization - applications owned and operated by Microsoft must get approval from the API owner before requesting tokens for that API.",
        "Remediation": "A developer in your tenant may be attempting to reuse an App ID owned by Microsoft. This error prevents them from impersonating a Microsoft application to call other APIs. They must move to another app ID they register in portal.azure.com."
    },
    {
        "Error Code": "65003",
        "Message": "Consent for first party token-to-self must be configured via preauthorization. If preauthorization has already been configured, update the request to use a URI identifier for the resource instead of '{resourceId}' to work around this error.",
        "Remediation": "The application developer needs to modify how the resource is specified in the authentication request to work around an implementation limitation."
    },
    {
        "Error Code": "65004",
        "Message": "User declined to consent to access the app.",
        "Remediation": "Have the user retry the sign-in and consent to the app."
    },
    {
        "Error Code": "65005",
        "Message": "The application '{name}' asked for scope '{scope}' that doesn't exist."
    },
    {
        "Error Code": "65006",
        "Message": "Resource '{resourceId}' had no entitlements matching required permissions configured on the required resource access for client '{clientId}'. Requested permission IDs: '{permissionId}'. This is a problem with one or more invalid permission ids on the client RRA configuration or the resource entitlement configuration."
    },
    {
        "Error Code": "65007",
        "Message": "Client '{clientId}' required resource access configuration has changed and therefore the request could not be completed. Please try again."
    },
    {
        "Error Code": "67001",
        "Message": "The resource '{resourceId}' is not a valid protected resource."
    },
    {
        "Error Code": "67002",
        "Message": "User consent is required to create a new delegation or extend an expired delegation. NameId: {claimId} IdentityProvider: {idp} Actor: {resourceId} RequestorPrincipal: {appId}({appName})."
    },
    {
        "Error Code": "67003",
        "Message": "The client '{appId}'({appName}) is not a valid service identity."
    },
    {
        "Error Code": "67006",
        "Message": "The service identity '{appId}'({appName}) is not trusted for delegation."
    },
    {
        "Error Code": "67007",
        "Message": "Unknown consent value '{value}'. Valid values are 'AdministratorConsentProvided', 'UseExistingUserConsent', and 'UserConsentProvided'."
    },
    {
        "Error Code": "69998",
        "Message": "OfficeS2S delegation redemption scenarios are not supported for resource '{resourceId}'."
    },
    {
        "Error Code": "70000",
        "Message": "Provided grant is invalid or malformed.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "70001",
        "Message": "Application identifier is not provided."
    },
    {
        "Error Code": "70002",
        "Message": "Client application name '{appName}' is not valid or the credentials used to authenticate the client could not be understood by the server.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "70003",
        "Message": "The app requested an unsupported grant type '{type}'."
    },
    {
        "Error Code": "70004",
        "Message": "The app requested an invalid redirect URI '{uri}'. The redirect address specified by the client does not match any configured addresses."
    },
    {
        "Error Code": "70005",
        "Message": "'The application requested an unsupported response type '{type}' when requesting a token.",
        "Remediation": "Contact the application owner."
    },
    {
        "Error Code": "70006",
        "Message": "Internal use"
    },
    {
        "Error Code": "70007",
        "Message": "The application requested an unsupported mode '{mode}' when requesting a token.",
        "Remediation": "Contact the application owner."
    },
    {
        "Error Code": "70008",
        "Message": "The provided authorization code or refresh token has expired due to inactivity. Send a new interactive authorization request for this user and resource.",
        "Remediation": "Expected - auth codes, refresh tokens, and sessions expire over time or are revoked by the user or an admin. The app will request a new login from the user."
    },
    {
        "Error Code": "70009",
        "Message": "Unable to complete OAuth2 IdP's sign in. The 'state' parameter could not be validated."
    },
    {
        "Error Code": "70010",
        "Message": "Unable to complete OAuth2 IdP's sign in. The 'state' parameter does not match the expected value."
    },
    {
        "Error Code": "70011",
        "Message": "The provided request must include a 'scope' input parameter. The provided value for the input parameter 'scope' is not valid. The scope {scope} is not valid.{detailsPhrase}"
    },
    {
        "Error Code": "70012",
        "Message": "A server error occurred while authenticating an MSA (consumer) user.",
        "Remediation": "Try again. If it continues to fail, open a support ticket: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-troubleshooting-support-howto"
    },
    {
        "Error Code": "70013",
        "Message": "The '{paramName}' request parameter is not supported."
    },
    {
        "Error Code": "70014",
        "Message": "The '{paramName}' request parameter is not supported."
    },
    {
        "Error Code": "70015",
        "Message": "The '{paramName}' request parameter is not supported."
    },
    {
        "Error Code": "70016",
        "Message": "OAuth 2.0 device flow error. Authorization is pending. Continue polling.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "70017",
        "Message": "Authorization declined."
    },
    {
        "Error Code": "70018",
        "Message": "Invalid verification code."
    },
    {
        "Error Code": "70019",
        "Message": "Verification code expired.",
        "Remediation": "Verification code expired. Have the user retry the sign-in"
    },
    {
        "Error Code": "70020",
        "Message": "The provided value for the input parameter 'device_code' is not valid. This device code has expired.",
        "Remediation": "Please make a new Device Authorization Request."
    },
    {
        "Error Code": "70021",
        "Message": "No matching federated identity record found for presented assertion. Assertion Issuer: '{issuer}'. Assertion Subject: '{subject}'. Assertion Audience: '{audience}'. https://docs.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation",
        "Remediation": "Application configuration issue. Ensure that the federated credential policy on the application registration is correct, and ensure that the developer is correctly submitting a token that complies with the policy requirements. See documentation at https://docs.microsoft.com/en-us/azure/active-directory/develop/workload-identity-federation."
    },
    {
        "Error Code": "70022",
        "Message": "Federated Identity Credential issuer must use HTTPS scheme, must not be loopback address, and may not include a query-string or fragment. Token issuer: {issuer}.",
        "Remediation": "Ensure that the OpenID Connect metadata for this federated credential is hosted on an HTTPS endpoint, does not point to loopback (127.0.0.1, localhost, etc.), and does not include a query-string or fragment."
    },
    {
        "Error Code": "70023",
        "Message": "External OIDC Provider token must have a lifetime of less than or equal to {maxTime}. Token issued at {issuedAt}. Token expires on {expires}.",
        "Remediation": "Supply tokens that have lifetime of less than or equal to the maximum allowed time."
    },
    {
        "Error Code": "70024",
        "Message": "OIDC Provider Metadata missing required field '{fieldName}'.",
        "Remediation": "Ensure that the OpenID Connect metadata sets all required fields."
    },
    {
        "Error Code": "70030",
        "Message": "Remote authentication failed to read session from storage."
    },
    {
        "Error Code": "70031",
        "Message": "Remote authentication session is in a bad state."
    },
    {
        "Error Code": "70033",
        "Message": "The remote auth session with this device code has already been approved."
    },
    {
        "Error Code": "70034",
        "Message": "The remote auth session with this device code has already been denied."
    },
    {
        "Error Code": "70035",
        "Message": "Remote auth session with this device code doesn't exist."
    },
    {
        "Error Code": "70036",
        "Message": "Unsupported remote auth session state."
    },
    {
        "Error Code": "70037",
        "Message": "Incorrect challenge response provided. Remote auth session denied.",
        "Remediation": "Incorrect challenge response provided. Remote auth session denied"
    },
    {
        "Error Code": "70039",
        "Message": "The remote auth session with this device code has expired."
    },
    {
        "Error Code": "70041",
        "Message": "Unable to complete OAuth2 IdP's sign in. The 'nonce' claim does not match the expected value."
    },
    {
        "Error Code": "70043",
        "Message": "The refresh token has expired or is invalid due to sign-in frequency checks by conditional access. The token was issued on {issueDate} and the maximum allowed lifetime for this request is {time}."
    },
    {
        "Error Code": "70044",
        "Message": "The session has expired or is invalid due to sign-in frequency checks by conditional access."
    },
    {
        "Error Code": "70045",
        "Message": "The refresh token is invalid due to sign-in frequency checks by conditional access. Additionally, since the sign-in frequency policy applies to all applications, the token will never be usable, and should be deleted. The token was issued on {issueDate} and the maximum allowed lifetime for this request is {time}."
    },
    {
        "Error Code": "70046",
        "Message": "The session has expired or is invalid due to re-authentication checks by conditional access."
    },
    {
        "Error Code": "70071",
        "Message": "Invalid requested token type: {type}."
    },
    {
        "Error Code": "70101",
        "Message": "Internal use"
    },
    {
        "Error Code": "75001",
        "Message": "An exception occurred while parsing a SAML binding message."
    },
    {
        "Error Code": "75005",
        "Message": "The request is not a valid SAML 2.0 protocol message."
    },
    {
        "Error Code": "75008",
        "Message": "Received SAML request with an unexpected destination '{actualDest}'. Expected one of '{validDests}'.",
        "Remediation": "The request from the application was denied since the SAML request had an unexpected destination. Contact the application owner"
    },
    {
        "Error Code": "75011",
        "Message": "Authentication method '{usedMethod}' by which the user authenticated with the service doesn't match requested authentication method '{requestedMethod}'. Contact the {appName} application owner.",
        "Remediation": "Authentication method by which the user authenticated with the service doesn't match requested authentication method. Contact the application owner"
    },
    {
        "Error Code": "75016",
        "Message": "The SP name qualifier '{name}' is not valid."
    },
    {
        "Error Code": "75019",
        "Message": "A domain hint can be specified either in the AuthnRequest or as a query string parameter, but not both.",
        "Remediation": "Contact the application owner."
    },
    {
        "Error Code": "75020",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "76020",
        "Message": "Application configured to use only protocols with signed requests"
    },
    {
        "Error Code": "76021",
        "Message": "The request sent by client is not signed while the application requires signed requests"
    },
    {
        "Error Code": "76022",
        "Message": "Cannot verify the signature of received authentication request since there is no certificate for verification configured in the application."
    },
    {
        "Error Code": "76023",
        "Message": "The signature of the received authentication request is invalid, please contact the administrator to resolve the issue."
    },
    {
        "Error Code": "76024",
        "Message": "The request has no information about the public certificate for signature validation, while the {certsLimit} most recent certificates did not verify the signature."
    },
    {
        "Error Code": "76025",
        "Message": "The request has no information about the signature algorithm used for signing."
    },
    {
        "Error Code": "76026",
        "Message": "The request has expired. Try to submit new request."
    },
    {
        "Error Code": "76027",
        "Message": "No certificate matching provided KeyInfo. Check that app is configured correctly."
    },
    {
        "Error Code": "76028",
        "Message": "Signature algorithm used to sign data is not supported."
    },
    {
        "Error Code": "76029",
        "Message": "The request signature could not be validated while it's required by application settings"
    },
    {
        "Error Code": "76030",
        "Message": "The request signature has incorrect format"
    },
    {
        "Error Code": "76031",
        "Message": "This endpoint does not support SAML request signing."
    },
    {
        "Error Code": "76032",
        "Message": "This service principal ID is not a GUID."
    },
    {
        "Error Code": "80001",
        "Message": "No Microsoft Azure AD Connect Authentication Agent was found. Make sure that your environment is configured correctly. If your directory is set for pass-through authentication, make sure that your Microsoft Azure AD Connect Authentication Agent is online.",
        "Remediation": "Authentication Agent unable to connect to Active Directory. Make sure the authentication agent is installed on a domain-joined machine that has line of sight to a data center that can serve the user's login request"
    },
    {
        "Error Code": "80002",
        "Message": "Internal error. Password validation request timed out. We were unable to either send the authentication request to the internal Hybrid Identity Service.",
        "Remediation": "Make sure that your on-premises Active Directory instance is available and responding to requests from the agents."
    },
    {
        "Error Code": "80003",
        "Message": "Unknown status returned from on-prem password validator.",
        "Remediation": "Invalid response received by Authentication Agent. An unknown error occurred while attempting to authentication against Active Directory on-premises."
    },
    {
        "Error Code": "80005",
        "Message": "An unknown error occurred while processing the response from the Authentication Agent.",
        "Remediation": "Retry the request and ensure that your on-premises AD instance is operating correctly. If it continues to fail, open a support ticket to get more details on the error: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-troubleshooting-support-howto"
    },
    {
        "Error Code": "80006",
        "Message": "Invalid on-prem password validation configuration: request URL must be secure over https."
    },
    {
        "Error Code": "80007",
        "Message": "The Authentication Agent is unable to validate user's password. Check the agent logs for more info and verify that Active Directory is operating as expected.",
        "Remediation": "Contact your administrator for more information."
    },
    {
        "Error Code": "80010",
        "Message": "Cannot encrypt with key identifier '{key}'. The Authentication Agent is unable to decrypt password."
    },
    {
        "Error Code": "80011",
        "Message": "Unexpected error retrieving password encryption keys."
    },
    {
        "Error Code": "80012",
        "Message": "Your account has time restrictions that keep you from signing in right now.",
        "Remediation": "The users attempted to log on outside of the allowed hours (this is specified in AD)"
    },
    {
        "Error Code": "80013",
        "Message": "The authentication attempt could not be completed due to time skew (time/date difference) between the machine running the authentication agent and AD.",
        "Remediation": "Fix time sync issues"
    },
    {
        "Error Code": "80014",
        "Message": "Validation request responded after maximum elapsed time exceeded.",
        "Remediation": "Authentication agent timed out. Open a support ticket with the error code, correlation ID, and timestamp to get more details on this error"
    },
    {
        "Error Code": "80015",
        "Message": "Validation request budget exceeded."
    },
    {
        "Error Code": "80016",
        "Message": "Validation request failed - unable to signal Authentication Agent."
    },
    {
        "Error Code": "80017",
        "Message": "An error occurred while decrypting user credentials. Check your Microsoft Azure AD Connect Authentication Agent logs for more information."
    },
    {
        "Error Code": "80018",
        "Message": "Unauthorized or forbidden access of encryption keys."
    },
    {
        "Error Code": "81001",
        "Message": "Service ticket size exceeded the maximum allowed.",
        "Remediation": "User's Kerberos ticket is too large. This can happen if the user is in too many groups and thus the Kerberos ticket contains too many group memberships. Reduce the user's group memberships and try again"
    },
    {
        "Error Code": "81004",
        "Message": "Kerberos authentication failed."
    },
    {
        "Error Code": "81005",
        "Message": "Authentication package is not supported."
    },
    {
        "Error Code": "81006",
        "Message": "No authorization header was found, returning 401 WWW-Authenticate."
    },
    {
        "Error Code": "81007",
        "Message": "Tenant is not enabled for DesktopSSO."
    },
    {
        "Error Code": "81008",
        "Message": "Failed to validate Kerberos ticket."
    },
    {
        "Error Code": "81009",
        "Message": "Unable to validate the user's Kerberos ticket, the authorization header value is not formatted correctly."
    },
    {
        "Error Code": "81010",
        "Message": "Seamless SSO failed because the user's Kerberos ticket has expired or is invalid."
    },
    {
        "Error Code": "81011",
        "Message": "Failed to find user by on-premise SID in the user's Kerberos ticket."
    },
    {
        "Error Code": "81012",
        "Message": "The user trying to sign in to Azure AD is different from the user signed into the device.",
        "Remediation": "This is not an error condition. It indicates that user trying to sign in to AzureAD is different from the user signed into the device. You can safely ignore this code in the logs"
    },
    {
        "Error Code": "81013",
        "Message": "Failed to lookup the user whose kerberos ticket was used to login."
    },
    {
        "Error Code": "81014",
        "Message": "The DesktopSSO auth token has expired."
    },
    {
        "Error Code": "81015",
        "Message": "Rejecting DesktopSSO Kerberos ticket as it was obtained through delegation. Delegated Kerberos ticket does not originate from user directly. Please contact your tenant administrator to disable delegation on the AZUREADSSOACC account."
    },
    {
        "Error Code": "81016",
        "Message": "Invalid STS request."
    },
    {
        "Error Code": "90000",
        "Message": "Internal use"
    },
    {
        "Error Code": "90002",
        "Message": "Tenant '{tenant_name}' not found. Check to make sure you have the correct tenant ID and are signing into the correct cloud. Check with your subscription administrator, this may happen if there are no active subscriptions for the tenant.",
        "Remediation": "The application developer will recieve this error if their app attempts to sign into a tenant that we cannot find. Often, this is because a cross-cloud app was used against the wrong cloud, or the developer attempted to sign in to a tenant derived from an email address, byut the domain isn't registered."
    },
    {
        "Error Code": "90004",
        "Message": "The request is not properly formatted."
    },
    {
        "Error Code": "90005",
        "Message": "Unable to complete request. The request was invalid since SID and login_hint cannot be used together."
    },
    {
        "Error Code": "90006",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90007",
        "Message": "Bad Request. The passed session ID cannot be parsed."
    },
    {
        "Error Code": "90008",
        "Message": "The user or administrator has not consented to use the application with ID '{appId}'({appName}). This happened because application is misconfigured: it must require access to Microsoft Graph by specifying at least 'Sign in and read user profile' permission.",
        "Remediation": "This happened because application is misconfigured: it must require access to Microsoft Graph by specifying at least 'Sign in and read user profile' permission."
    },
    {
        "Error Code": "90009",
        "Message": "Application '{appId}'({appName}) is requesting a token for itself. This scenario is supported only if resource is specified using the GUID based App Identifier."
    },
    {
        "Error Code": "90010",
        "Message": "Unable to create {algoName} algorithm.",
        "Remediation": "Contact the application developer. The request is not supported for various reasons. For example, the request is made using an unsupported request method (only POST method is supported) or the token signing algorithm that was requested is not supported."
    },
    {
        "Error Code": "90012",
        "Message": "This request has timed out."
    },
    {
        "Error Code": "90013",
        "Message": "Invalid input received from the user."
    },
    {
        "Error Code": "90014",
        "Message": "The required field '{name}' is missing from the credential. Ensure that you have all the necessary parameters for the login request.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "90015",
        "Message": "Requested query string is too long."
    },
    {
        "Error Code": "90016",
        "Message": "Invalid access token. Required claim is missing."
    },
    {
        "Error Code": "90017",
        "Message": "Unexpected field '{fieldName}'."
    },
    {
        "Error Code": "90019",
        "Message": "No tenant-identifying information found in either the request or implied by any provided credentials.",
        "Remediation": "Application error - the request can't be routed to a tenant, but needs to be."
    },
    {
        "Error Code": "90020",
        "Message": "The SAML 1.1 Assertion is missing ImmutableID of the user.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "90022",
        "Message": "Principal name format is invalid for '{name}'. Expected format: name[/instance][@realm]. The principal name is required, host and realm are optional and may be set to null."
    },
    {
        "Error Code": "90023",
        "Message": "Invalid STS request."
    },
    {
        "Error Code": "90024",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90025",
        "Message": "Request processing has exceeded gateway allowance."
    },
    {
        "Error Code": "90026",
        "Message": "Hostname contains an invalid wildcard '*' character."
    },
    {
        "Error Code": "90027",
        "Message": "We are unable to issue tokens from this API version on the MSA tenant. Please contact the application vendor as they need to use version 2.0 of the protocol to support this."
    },
    {
        "Error Code": "90028",
        "Message": "Principal name format is invalid for name '{name}'. Primary component of the name is required."
    },
    {
        "Error Code": "90029",
        "Message": "The realm '{name}' is a Unicode domain name. Domain names of this form are not supported."
    },
    {
        "Error Code": "90030",
        "Message": "A transient error has occurred. Try again after some time."
    },
    {
        "Error Code": "90031",
        "Message": "A transient error has occurred. Try again after some time."
    },
    {
        "Error Code": "90032",
        "Message": "A transient error has occurred. Try again after some time."
    },
    {
        "Error Code": "90033",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90035",
        "Message": "Service is temporarily unavailable. Please retry later."
    },
    {
        "Error Code": "90036",
        "Message": "An unexpected, non-retryable error stemming from the directory service has occurred.",
        "Remediation": "If you see this consistently, open a support ticket to get more details on the error: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-troubleshooting-support-howto"
    },
    {
        "Error Code": "90037",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "90038",
        "Message": "Tenant '{tenant_name}' request is being redirected to the National Cloud '{cloud}'."
    },
    {
        "Error Code": "90039",
        "Message": "Service is temporarily unavailable. Please retry later."
    },
    {
        "Error Code": "90040",
        "Message": "A non-retryable error has occurred."
    },
    {
        "Error Code": "90041",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90042",
        "Message": "National Cloud Name is missing in the postback request."
    },
    {
        "Error Code": "90043",
        "Message": "OAuth2 grant was issued by National Cloud STS.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "90044",
        "Message": "National Cloud Request Process Switched off."
    },
    {
        "Error Code": "90045",
        "Message": "Service is too busy. Please try again later."
    },
    {
        "Error Code": "90046",
        "Message": "Internal use"
    },
    {
        "Error Code": "90047",
        "Message": "Internal use"
    },
    {
        "Error Code": "90049",
        "Message": "Application could not be found."
    },
    {
        "Error Code": "90050",
        "Message": "Response content length from external IdP exceeds supported limit."
    },
    {
        "Error Code": "90051",
        "Message": "Invalid Delegation Token. Invalid national Cloud ID ({cloudId}) is specified."
    },
    {
        "Error Code": "90052",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "90053",
        "Message": "Internal use"
    },
    {
        "Error Code": "90055",
        "Message": "The server has terminated the request due to excessive request rate. Please wait a few seconds and try again.",
        "Remediation": "Your tenant has sent too many requests to AAD, triggering anti-abuse throttling measures. Please check to see if there are any misbehaving applications that are sending too many requests to AAD."
    },
    {
        "Error Code": "90056",
        "Message": "Requested resource cannot be found."
    },
    {
        "Error Code": "90057",
        "Message": "Server encountered an internal problem."
    },
    {
        "Error Code": "90058",
        "Message": "Service is temporarily unavailable. Please retry later."
    },
    {
        "Error Code": "90059",
        "Message": "HealthInfoController Failed with the following Exception: {ex}"
    },
    {
        "Error Code": "90061",
        "Message": "Request to External OIDC endpoint failed."
    },
    {
        "Error Code": "90071",
        "Message": "An admin from {tenant} must update their access settings to accept inbound multifactor authentication."
    },
    {
        "Error Code": "90072",
        "Message": "User account '{user}' from identity provider '{idp}' does not exist in tenant '{tenant}' and cannot access the application '{application}'({appName}) in that tenant. The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account",
        "Remediation": "The account needs to be added as an external user in the tenant first. Sign out and sign in again with a different Azure Active Directory user account"
    },
    {
        "Error Code": "90073",
        "Message": "Invalid Fairfax Gateway Redirect."
    },
    {
        "Error Code": "90081",
        "Message": "An error occurred when the service tried to process a WS-Federation message. The message was invalid."
    },
    {
        "Error Code": "90082",
        "Message": "Authentication policy '{name}' selected for the request is not currently supported."
    },
    {
        "Error Code": "90083",
        "Message": "Request is unsupported."
    },
    {
        "Error Code": "90084",
        "Message": "Guest accounts are not allowed for this site."
    },
    {
        "Error Code": "90085",
        "Message": "The service is unable to issue a token because the company object hasn't been provisioned yet."
    },
    {
        "Error Code": "90086",
        "Message": "The user DA token is expired."
    },
    {
        "Error Code": "90087",
        "Message": "An error occurred while creating the WS-Federation message from the URI."
    },
    {
        "Error Code": "90088",
        "Message": "Authentication failed due to email address domain is not in allowed domains list for identity provider.",
        "Remediation": "The email address domain is not in the application's whitelisted domains."
    },
    {
        "Error Code": "90089",
        "Message": "User token should not be used in App on behalf of flow."
    },
    {
        "Error Code": "90090",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90091",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90092",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "90093",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "90094",
        "Message": "Admin consent is required for the permissions requested by this application.",
        "Remediation": "Ask your tenant administrator to provide consent for this application."
    },
    {
        "Error Code": "90095",
        "Message": "Admin consent is required for the permissions requested by this application. An admin consent request may be sent to the admin."
    },
    {
        "Error Code": "90096",
        "Message": "Admin consent is required for the permissions requested by this application. Admin consent request sent for processing."
    },
    {
        "Error Code": "90097",
        "Message": "An error has occured during admin consent processing."
    },
    {
        "Error Code": "90098",
        "Message": "An unexpected approval request ID was provided."
    },
    {
        "Error Code": "90099",
        "Message": "The application '{appId}' ({appName}) has not been authorized in the tenant '{tenant}'. Applications must be authorized to access the customer tenant before partner delegated administrators can use them.",
        "Remediation": "Provide pre-consent or execute the appropriate Partner Center API to authorize the application."
    },
    {
        "Error Code": "90100",
        "Message": "{name} parameter is empty or not valid."
    },
    {
        "Error Code": "90101",
        "Message": "The supplied data isn't a valid email address. Please provide it in the format someone@example.com",
        "Remediation": "Application or user error - if this persists, reach out to the impacted user or developer for more details."
    },
    {
        "Error Code": "90102",
        "Message": "'{name}' value must be a valid absolute URI."
    },
    {
        "Error Code": "90107",
        "Message": "The request is not valid. Make sure your data doesn't have invalid characters."
    },
    {
        "Error Code": "90112",
        "Message": "Application identifier is expected to be a GUID."
    },
    {
        "Error Code": "90114",
        "Message": "The specified bulk AADJ token expiration timestamp will cause an expired token to be issued."
    },
    {
        "Error Code": "90115",
        "Message": "Code/npotc parameter is not allowed together with password."
    },
    {
        "Error Code": "90116",
        "Message": "{method} request is made, while POST is the only supported verb."
    },
    {
        "Error Code": "90117",
        "Message": "Invalid request."
    },
    {
        "Error Code": "90119",
        "Message": "The user code is null or missing."
    },
    {
        "Error Code": "90120",
        "Message": "This request was already authorized or declined."
    },
    {
        "Error Code": "90121",
        "Message": "Invalid empty request."
    },
    {
        "Error Code": "90122",
        "Message": "User identifier is not present."
    },
    {
        "Error Code": "90123",
        "Message": "The token can't be issued because the identity or claim issuance provider denied the request. Response code: {errorCode}."
    },
    {
        "Error Code": "90124",
        "Message": "{resConstant} '{resourceId}' {resourceName} is not supported over the /common or /consumers endpoints. Please use the /organizations or tenant-specific endpoint.",
        "Remediation": "Use the /organizations or tenant-specific endpoint."
    },
    {
        "Error Code": "90125",
        "Message": "{userName} isn't in our system. Make sure you entered the user name correctly."
    },
    {
        "Error Code": "90126",
        "Message": "User Type is not supported on this endpoint. The system can't infer the user's tenant from the user name: {userName}"
    },
    {
        "Error Code": "90128",
        "Message": "Unable to load OptIn store for user."
    },
    {
        "Error Code": "90129",
        "Message": "{resConstant} '{resourceId}' {resourceName} has a configured token version of '1' and is not supported over the /common or /consumers endpoints."
    },
    {
        "Error Code": "90130",
        "Message": "{appConstant} '{appId}' {appName} is not supported over the /common or /consumers endpoints. Please use the /organizations or tenant-specific endpoint."
    },
    {
        "Error Code": "90131",
        "Message": "Invalid ambiguous request. sid cannot be used with prompt {prompt}."
    },
    {
        "Error Code": "90132",
        "Message": "The provided value for the input parameter 'device_code' is not valid. Device codes supporting the personal Microsoft Account sign-in audience can only be used for v2 common or consumers tenants."
    },
    {
        "Error Code": "90133",
        "Message": "Device Code flow is not supported under /common or /consumers endpoint."
    },
    {
        "Error Code": "90134",
        "Message": "Retrieving claims from identity provider '{idp}' failed."
    },
    {
        "Error Code": "90135",
        "Message": "The user decided not to continue the authentication. No remediation is required."
    },
    {
        "Error Code": "90136",
        "Message": "Device Code flow is not supported for Confidential Clients."
    },
    {
        "Error Code": "90137",
        "Message": "Token issuance cannot proceed because user declined consent approval to release their profile information."
    },
    {
        "Error Code": "90138",
        "Message": "Invalid ambiguous request. sid cannot be used with login_hint."
    },
    {
        "Error Code": "90150",
        "Message": "Failed to read request."
    },
    {
        "Error Code": "90160",
        "Message": "An internal error occurred while attempting to remediate the user."
    },
    {
        "Error Code": "90170",
        "Message": "An internal error occured while attempting to proxy binding redirect request"
    },
    {
        "Error Code": "90171",
        "Message": "An internal error occured for cell based fallback"
    },
    {
        "Error Code": "90201",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "90202",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "90401",
        "Message": "Access denied."
    },
    {
        "Error Code": "90500",
        "Message": "Tenant belongs to fault domain {domain}.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "90501",
        "Message": "Tenant ({name} ({identifier})) request is being redirected to USGov."
    },
    {
        "Error Code": "100000",
        "Message": "The Regional Cache Auth Service does not have the encrypted global signing key."
    },
    {
        "Error Code": "100001",
        "Message": "The Regional Cache Auth Service fails to retrieve the global signing key."
    },
    {
        "Error Code": "100002",
        "Message": "Non-retryable error has occurred in regional cache."
    },
    {
        "Error Code": "100003",
        "Message": "Timeout occurred in request to global sts."
    },
    {
        "Error Code": "100004",
        "Message": "Empty or Error response from Global Sts when called in by Regional Cache Auth instance."
    },
    {
        "Error Code": "100005",
        "Message": "Regional Cache Auth instance is not allowed to issue a token for this environment."
    },
    {
        "Error Code": "100006",
        "Message": "Regional Cache Auth Service token requests for audience App that requires custom signing keys or that has claims mapping policy are forbidden."
    },
    {
        "Error Code": "100007",
        "Message": "AAD Regional ONLY supports auth either for MSIs OR for requests from MSAL using SN+I for 1P apps or 3P apps in Microsoft infrastructure tenants."
    },
    {
        "Error Code": "100008",
        "Message": "Regional Cache Auth Service token requests for audience App that has opted in for a PFT token is forbidden."
    },
    {
        "Error Code": "100009",
        "Message": "Regional Cache Auth Service token requests for flows that require encrypted tokens are forbidden."
    },
    {
        "Error Code": "100010",
        "Message": "App specific discovery requests for Regional Cache Auth Service are forbidden."
    },
    {
        "Error Code": "100011",
        "Message": "Tenant Domain Name specific discovery requests for Regional Cache Auth Service are forbidden."
    },
    {
        "Error Code": "100012",
        "Message": "MSAonly tenant specific discovery requests for MSA tenant for Regional Cache Auth Service are forbidden."
    },
    {
        "Error Code": "100013",
        "Message": "The current discovery keys requests scenarios for Regional Cache Auth Service are forbidden."
    },
    {
        "Error Code": "100014",
        "Message": "Force cache flow parameter was specified as true but no cached response was found"
    },
    {
        "Error Code": "100015",
        "Message": "Regional Cache Auth Pipeline miss StsTenant"
    },
    {
        "Error Code": "100016",
        "Message": "Regional Cache Auth Pipeline missing Signing credentials"
    },
    {
        "Error Code": "100017",
        "Message": "There was an error issuing a token or an issue with our sign-in service.",
        "Remediation": "If this persists, open a support ticket to resolve this issue: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-troubleshooting-support-howto"
    },
    {
        "Error Code": "100018",
        "Message": "The regional cache auth requests that expects confirmation (cnf) claim in the token response are forbidden."
    },
    {
        "Error Code": "100019",
        "Message": "The regional cache auth requests from tenants with token lifetime policy defined are forbidden."
    },
    {
        "Error Code": "100020",
        "Message": "Regional key discovery endpoint is forbidden."
    },
    {
        "Error Code": "100021",
        "Message": "The regional cache auth requests that reach max hop count are dropped."
    },
    {
        "Error Code": "100022",
        "Message": "The request was failed due to AAD outage simulation for a participating tenant."
    },
    {
        "Error Code": "100023",
        "Message": "Regional endpoints are not yet supported in sovereign clouds."
    },
    {
        "Error Code": "100024",
        "Message": "AAD Regional ONLY supports auth either for MSIs OR for requests from supported MSAL using SN+I for 1P apps or 3P apps in Microsoft infrastructure tenants. This request is forbidden because it comes from neither 1P app nor 3P apps in Microsoft infrastructure tenants."
    },
    {
        "Error Code": "100026",
        "Message": "AAD Regional ONLY supports auth either for MSIs OR for requests from supported MSAL using SN+I for 1P apps or 3P apps in Microsoft infrastructure tenants. This request is forbidden because it does not use SN+I."
    },
    {
        "Error Code": "100027",
        "Message": "AAD Regional does not support traffic from client application {clientId} at this time."
    },
    {
        "Error Code": "120000",
        "Message": "Incorrect password."
    },
    {
        "Error Code": "120001",
        "Message": "New password doesn't meet complexity requirements. Passwords can't contain user ID, and need to be 8-16 characters long, with at least 3 of the following: uppercase letters, lowercase letters, numbers, and symbols."
    },
    {
        "Error Code": "120002",
        "Message": "New password doesn't meet complexity requirements. Passwords can't contain user ID, and need to be 8-16 characters long, with at least 3 of the following: uppercase letters, lowercase letters, numbers, and symbols."
    },
    {
        "Error Code": "120003",
        "Message": "New password doesn't meet complexity requirements. Passwords can't contain user ID, and need to be 8-16 characters long, with at least 3 of the following: uppercase letters, lowercase letters, numbers, and symbols."
    },
    {
        "Error Code": "120004",
        "Message": "New password doesn't match the password complexity requirements of the user's company's OnPrem Active Directory."
    },
    {
        "Error Code": "120005",
        "Message": "Password was successfully updated, but servers take time to catch up. Please try signing in again in a few minutes."
    },
    {
        "Error Code": "120006",
        "Message": "Password change request got interrupted. Check if the password got updated, else try again."
    },
    {
        "Error Code": "120012",
        "Message": "User's organization does not allow them to change their password themselves through AAD."
    },
    {
        "Error Code": "120013",
        "Message": "Password change failed due to connectivity issues trying to write to user's onprem AD. Try again in a few minutes."
    },
    {
        "Error Code": "120014",
        "Message": "User account is either disabled or temporarily locked by user's organization."
    },
    {
        "Error Code": "120015",
        "Message": "Password change failed due to user account misconfiguration."
    },
    {
        "Error Code": "120016",
        "Message": "User not found."
    },
    {
        "Error Code": "120017",
        "Message": "Operation not supported."
    },
    {
        "Error Code": "120018",
        "Message": "New password does not comply with the policy. The password is too common."
    },
    {
        "Error Code": "120019",
        "Message": "New password contains a word, phrase, or pattern that is banned by a policy in user's organization."
    },
    {
        "Error Code": "120020",
        "Message": "Change user password operation failed."
    },
    {
        "Error Code": "121000",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "121003",
        "Message": "User's organization does not allow them to change their password themselves through AAD."
    },
    {
        "Error Code": "130001",
        "Message": "Signature key ID is not provided."
    },
    {
        "Error Code": "130004",
        "Message": "UserPrincipal doesn't have the NGC key configured."
    },
    {
        "Error Code": "130005",
        "Message": "NGC key signature verification failed."
    },
    {
        "Error Code": "130006",
        "Message": "The NGC transport key isn't configured on the device."
    },
    {
        "Error Code": "130007",
        "Message": "The device is disabled."
    },
    {
        "Error Code": "130008",
        "Message": "Device referenced by the NGC key is not found."
    },
    {
        "Error Code": "130009",
        "Message": "Device key was found weak."
    },
    {
        "Error Code": "130500",
        "Message": "Phone sign in was blocked due to User Credential Policy."
    },
    {
        "Error Code": "130501",
        "Message": "Sign in was blocked due to User Credential Policy."
    },
    {
        "Error Code": "130502",
        "Message": "Temporary Access Pass sign in was blocked due to User Credential Policy."
    },
    {
        "Error Code": "130503",
        "Message": "Your Temporary Access Pass is incorrect. If you don't know your pass, contact your administrator."
    },
    {
        "Error Code": "130504",
        "Message": "Your Temporary Access Pass has expired. Contact your administrator to obtain a new pass."
    },
    {
        "Error Code": "130505",
        "Message": "Your one-time Temporary Access Pass has been redeemed. Contact your admin to get a new pass."
    },
    {
        "Error Code": "130506",
        "Message": "Access Pass must be used for Web Sign In. Contact your admin to get an Access Pass."
    },
    {
        "Error Code": "130507",
        "Message": "An access pass could not be found or verified for the user."
    },
    {
        "Error Code": "131000",
        "Message": "PublicIdentifier has an invalid GUID."
    },
    {
        "Error Code": "131001",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "131002",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "131003",
        "Message": "A transient error has occurred. Please try again."
    },
    {
        "Error Code": "131005",
        "Message": "Phone Entry not found during GetOneTimeCode request."
    },
    {
        "Error Code": "131006",
        "Message": "Public Identifier SAS Authentication has encountered a problem."
    },
    {
        "Error Code": "131008",
        "Message": "Trying to create credential from unvalidated PIA data."
    },
    {
        "Error Code": "131009",
        "Message": "Phone Number signin is not enabled for this tenant."
    },
    {
        "Error Code": "131010",
        "Message": "User not allowed by policy conditions."
    },
    {
        "Error Code": "131011",
        "Message": "A invalid input was entered."
    },
    {
        "Error Code": "131012",
        "Message": "This attempt to sign in has been throttled."
    },
    {
        "Error Code": "131100",
        "Message": "User account has to be a resource account to request a 'resource_account' grant type."
    },
    {
        "Error Code": "131101",
        "Message": "Resource Account key is malformed."
    },
    {
        "Error Code": "131102",
        "Message": "Resource Account key signature verification failed."
    },
    {
        "Error Code": "135000",
        "Message": "Fido signature verification failed."
    },
    {
        "Error Code": "135001",
        "Message": "UserPrincipal doesn't have the key ID configured."
    },
    {
        "Error Code": "135002",
        "Message": "Fido key does not have authenticator data."
    },
    {
        "Error Code": "135003",
        "Message": "Fido assertion verification failed. Invalid gesture provided."
    },
    {
        "Error Code": "135004",
        "Message": "Invalid postBackUrl parameter."
    },
    {
        "Error Code": "135005",
        "Message": "Invalid cancelUrl parameter."
    },
    {
        "Error Code": "135006",
        "Message": "Invalid resumeUrl parameter."
    },
    {
        "Error Code": "135007",
        "Message": "Client data type is not valid."
    },
    {
        "Error Code": "135008",
        "Message": "Relying Party Origin is not valid."
    },
    {
        "Error Code": "135009",
        "Message": "Flow Token Scenario must be login scenario."
    },
    {
        "Error Code": "135010",
        "Message": "UserPrincipal doesn't have the key ID configured."
    },
    {
        "Error Code": "135011",
        "Message": "Device used during the authentication is disabled."
    },
    {
        "Error Code": "135012",
        "Message": "UserObjectId from the UserHandle does not match with UserPrincipal UserObjectId."
    },
    {
        "Error Code": "135013",
        "Message": "Invalid UserHandle prefix."
    },
    {
        "Error Code": "135014",
        "Message": "Invalid UserHandle length."
    },
    {
        "Error Code": "135015",
        "Message": "The FIDO exclude list was not a valid JSON blob."
    },
    {
        "Error Code": "135016",
        "Message": "FIDO sign-in is disabled via policy."
    },
    {
        "Error Code": "135017",
        "Message": "Unexpected Signature Counter received from authenticator."
    },
    {
        "Error Code": "135018",
        "Message": "Invalid challenge received from fido assertion."
    },
    {
        "Error Code": "135019",
        "Message": "Expired Challenge received from Fido assertion."
    },
    {
        "Error Code": "135020",
        "Message": "Invalid Fido assertion."
    },
    {
        "Error Code": "135021",
        "Message": "Invalid UserHandle prefix."
    },
    {
        "Error Code": "135022",
        "Message": "Redirect uri provided by MSA is not valid."
    },
    {
        "Error Code": "140000",
        "Message": "Request nonce is expired. Current time: {curTime}, expiry time of assertion {expTime}."
    },
    {
        "Error Code": "140001",
        "Message": "The session key is not valid."
    },
    {
        "Error Code": "140002",
        "Message": "Key not found"
    },
    {
        "Error Code": "140003",
        "Message": "Nonce purpose not supported"
    },
    {
        "Error Code": "140004",
        "Message": "Invalid Ticket Granting Ticket request."
    },
    {
        "Error Code": "140005",
        "Message": "Invalid Ticket Granting Ticket request."
    },
    {
        "Error Code": "140006",
        "Message": "Invalid Ticket Granting Ticket request."
    },
    {
        "Error Code": "140007",
        "Message": "Invalid Ticket Granting Service request."
    },
    {
        "Error Code": "140008",
        "Message": "Invalid ApReq assertion provided."
    },
    {
        "Error Code": "160011",
        "Message": "Selected user account was invalid."
    },
    {
        "Error Code": "160021",
        "Message": "Application requested a user session which does not exist."
    },
    {
        "Error Code": "165000",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details.",
        "Remediation": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "165001",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "165002",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "165003",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "165004",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "165900",
        "Message": "Invalid request."
    },
    {
        "Error Code": "180001",
        "Message": "Cannot encrypt auth ticket with key version '{version}'."
    },
    {
        "Error Code": "180002",
        "Message": "Cannot decrypt buffer with key version '{version}'."
    },
    {
        "Error Code": "200000",
        "Message": "User object type ('{type}') not expected."
    },
    {
        "Error Code": "200001",
        "Message": "Authorization code redemption cannot be forked."
    },
    {
        "Error Code": "200121",
        "Message": "Unsupported WS-Federation message of type '{messageType}'."
    },
    {
        "Error Code": "200122",
        "Message": "Invalid WS-Federation message. {paramName} parameter is required."
    },
    {
        "Error Code": "219000",
        "Message": "Cannot open pfx. Pfx bytes or password is wrong."
    },
    {
        "Error Code": "220000",
        "Message": "Authenc: cache value is expired. Date: {expectedTime}, Now: {currentTime}."
    },
    {
        "Error Code": "220025",
        "Message": "Encryption key {version} not found."
    },
    {
        "Error Code": "220050",
        "Message": "The specified encryption key version override {num} was not found in the list of keys."
    },
    {
        "Error Code": "220100",
        "Message": "Authenc decryption failed."
    },
    {
        "Error Code": "220200",
        "Message": "Authenc incorrect version."
    },
    {
        "Error Code": "220450",
        "Message": "The Chrome WebView version is not supported.",
        "Remediation": "Developer issue - they should ensure that their app is using appropriate and supported webviews when signing in the user."
    },
    {
        "Error Code": "220501",
        "Message": "Unable to download CRL. Invalid or no response from CRL source {source}."
    },
    {
        "Error Code": "221000",
        "Message": "The resource is not configured to accept device-only tokens."
    },
    {
        "Error Code": "230000",
        "Message": "Internal use"
    },
    {
        "Error Code": "230002",
        "Message": "Internal use"
    },
    {
        "Error Code": "230003",
        "Message": "Internal use"
    },
    {
        "Error Code": "230004",
        "Message": "Internal use"
    },
    {
        "Error Code": "230005",
        "Message": "Internal use"
    },
    {
        "Error Code": "230006",
        "Message": "Internal use"
    },
    {
        "Error Code": "230007",
        "Message": "Internal use"
    },
    {
        "Error Code": "230008",
        "Message": "Internal use"
    },
    {
        "Error Code": "230009",
        "Message": "Internal use"
    },
    {
        "Error Code": "230010",
        "Message": "Internal use"
    },
    {
        "Error Code": "230011",
        "Message": "Internal use"
    },
    {
        "Error Code": "230012",
        "Message": "Internal use"
    },
    {
        "Error Code": "230013",
        "Message": "Internal use"
    },
    {
        "Error Code": "230014",
        "Message": "Internal use"
    },
    {
        "Error Code": "230015",
        "Message": "Internal use"
    },
    {
        "Error Code": "230016",
        "Message": "Internal use"
    },
    {
        "Error Code": "230017",
        "Message": "CCS couldn't find valid user data. Data could be missing, expired or invalid."
    },
    {
        "Error Code": "230018",
        "Message": "Internal use"
    },
    {
        "Error Code": "230019",
        "Message": "Internal use"
    },
    {
        "Error Code": "230020",
        "Message": "Internal use"
    },
    {
        "Error Code": "230021",
        "Message": "Internal use"
    },
    {
        "Error Code": "230022",
        "Message": "Internal use"
    },
    {
        "Error Code": "230023",
        "Message": "Internal use"
    },
    {
        "Error Code": "230024",
        "Message": "Empty cached credential cert list or failed to find valid cached credential cert."
    },
    {
        "Error Code": "230025",
        "Message": "Internal use"
    },
    {
        "Error Code": "230026",
        "Message": "Internal use"
    },
    {
        "Error Code": "230027",
        "Message": "Internal use"
    },
    {
        "Error Code": "230028",
        "Message": "Internal use"
    },
    {
        "Error Code": "230029",
        "Message": "Internal use"
    },
    {
        "Error Code": "230030",
        "Message": "Internal use"
    },
    {
        "Error Code": "230031",
        "Message": "Internal use"
    },
    {
        "Error Code": "230032",
        "Message": "User's mailbox has exceeded maximum mailbox size."
    },
    {
        "Error Code": "230033",
        "Message": "Internal use"
    },
    {
        "Error Code": "230034",
        "Message": "Internal use"
    },
    {
        "Error Code": "230035",
        "Message": "Internal use"
    },
    {
        "Error Code": "230036",
        "Message": "Internal use"
    },
    {
        "Error Code": "230037",
        "Message": "Required auth methods from cached token are not satisfied."
    },
    {
        "Error Code": "230038",
        "Message": "Retrieved token with unsupported auth methods (amr)."
    },
    {
        "Error Code": "230039",
        "Message": "Exchange Api Error."
    },
    {
        "Error Code": "230040",
        "Message": "Failed to load key from Torus."
    },
    {
        "Error Code": "230041",
        "Message": "Failed to load cert from machine."
    },
    {
        "Error Code": "230042",
        "Message": "Cannot find Service Key in cache."
    },
    {
        "Error Code": "230043",
        "Message": "Cannot find public cert shared by partners in cache."
    },
    {
        "Error Code": "230044",
        "Message": "Cannot find private cert owned by CCS in cache."
    },
    {
        "Error Code": "230045",
        "Message": "Password Cred not retrieved."
    },
    {
        "Error Code": "230046",
        "Message": "SDS BEToBEMisroute error"
    },
    {
        "Error Code": "230047",
        "Message": "SDS ErrorInternalServerError error"
    },
    {
        "Error Code": "230048",
        "Message": "SDS ApplicationThrottled error"
    },
    {
        "Error Code": "230049",
        "Message": "SDS ErrorADUnavailable error"
    },
    {
        "Error Code": "230050",
        "Message": "SDS ResourceUnhealthy error"
    },
    {
        "Error Code": "230051",
        "Message": "SDS ErrorItemNotFound error"
    },
    {
        "Error Code": "230052",
        "Message": "SDS ErrorTooManyObjectsOpened error"
    },
    {
        "Error Code": "230053",
        "Message": "SDS ErrorMailboxQuotaExceeded error"
    },
    {
        "Error Code": "230054",
        "Message": "SDS MailboxNotEnabledForRESTAPI error"
    },
    {
        "Error Code": "230055",
        "Message": "SDS ErrorConnectionFailed error"
    },
    {
        "Error Code": "230056",
        "Message": "SDS RequestBroker--ParseUri error"
    },
    {
        "Error Code": "230057",
        "Message": "SDS ErrorADOperation error"
    },
    {
        "Error Code": "230058",
        "Message": "SDS ErrorDataSourceOperation error"
    },
    {
        "Error Code": "230059",
        "Message": "SDS ErrorInternalServerTransientError error"
    },
    {
        "Error Code": "230060",
        "Message": "SDS ErrorInvalidProperty error"
    },
    {
        "Error Code": "230061",
        "Message": "Could not get enforcement event successfully"
    },
    {
        "Error Code": "230062",
        "Message": "Presented or requested primary refresh token could not be supported."
    },
    {
        "Error Code": "230063",
        "Message": "Remote forest discovery is not supported on restricted forests."
    },
    {
        "Error Code": "230064",
        "Message": "Exchange Api Error returned by SDS when tenant guid not found while storing tokens."
    },
    {
        "Error Code": "230065",
        "Message": "Exchange Api request timed out."
    },
    {
        "Error Code": "230066",
        "Message": "Exchange SDS requests timed out."
    },
    {
        "Error Code": "230067",
        "Message": "Exchange Auth Api requests timed out."
    },
    {
        "Error Code": "230068",
        "Message": "Exchange DsApi request timed out."
    },
    {
        "Error Code": "230069",
        "Message": "The Exchange Service returned a 503 Service Unavailable."
    },
    {
        "Error Code": "230070",
        "Message": "The Exchange SDS returned a 503 Service Unavailable."
    },
    {
        "Error Code": "230071",
        "Message": "The Exchange Auth Api returned a 503 Service Unavailable."
    },
    {
        "Error Code": "230072",
        "Message": "The Exchange DsApi returned a 503 Service Unavailable."
    },
    {
        "Error Code": "230073",
        "Message": "An Exchange Api error not defined in CCS"
    },
    {
        "Error Code": "230074",
        "Message": "An Exchange SDS Api error indicating invalid serialized access token"
    },
    {
        "Error Code": "230075",
        "Message": "An Exchange SDS Api error indicating mailbox or account cannot be accessed"
    },
    {
        "Error Code": "230076",
        "Message": "An Exchange SDS Api error indicating mailbox cannot be opened."
    },
    {
        "Error Code": "230077",
        "Message": "Error due to AD Topology Endpoint not found in CCS."
    },
    {
        "Error Code": "230078",
        "Message": "Error due to Collection not found in CCS."
    },
    {
        "Error Code": "230079",
        "Message": "Error due to not enough memory in CCS."
    },
    {
        "Error Code": "230080",
        "Message": "Skip cached credential storage."
    },
    {
        "Error Code": "230081",
        "Message": "CCS StoreProxy Returned Internal Server Error"
    },
    {
        "Error Code": "230082",
        "Message": "CCS StoreProxy Timed out"
    },
    {
        "Error Code": "230083",
        "Message": "There is insufficient Cafe Routing Info to forward call"
    },
    {
        "Error Code": "230084",
        "Message": "KVCache call failed with RPC error"
    },
    {
        "Error Code": "230085",
        "Message": "KVCacheClient failed to process request"
    },
    {
        "Error Code": "230086",
        "Message": "Call to KVCache timed out"
    },
    {
        "Error Code": "230087",
        "Message": "Call to KVCache timed out"
    },
    {
        "Error Code": "230088",
        "Message": "Key not found in KVCache"
    },
    {
        "Error Code": "230089",
        "Message": "Request is blocked by custom policy evaluation."
    },
    {
        "Error Code": "230090",
        "Message": "Request is blocked by resiliency defaults disablement."
    },
    {
        "Error Code": "230091",
        "Message": "Token posted from ESTS can not be validated by CCS"
    },
    {
        "Error Code": "230092",
        "Message": "SDS Error due to corrupt data."
    },
    {
        "Error Code": "230093",
        "Message": "SDS Error due to invalid decryption key."
    },
    {
        "Error Code": "230094",
        "Message": "SDS Error due to relocation of tenant to different forest than expected."
    },
    {
        "Error Code": "230095",
        "Message": "SDS Error due to collection creation progress."
    },
    {
        "Error Code": "230096",
        "Message": "SDS Error indicating that mailbox was quarantined and unable to be accessed."
    },
    {
        "Error Code": "230097",
        "Message": "SDS Error due to duplicate secondary key."
    },
    {
        "Error Code": "230098",
        "Message": "SDS Error indicating that CollectionId could not be found."
    },
    {
        "Error Code": "230099",
        "Message": "Lookup User Mailbox Id from DsApi failed with Not Found."
    },
    {
        "Error Code": "230100",
        "Message": "Lookup User Mailbox Id from DsApi timed out."
    },
    {
        "Error Code": "230101",
        "Message": "Attempt to access data at KVCache failed indicating issue with service."
    },
    {
        "Error Code": "230102",
        "Message": "Attempt to access data at KVCache failed due to invalid Key or Value data format."
    },
    {
        "Error Code": "240000",
        "Message": "Limit for BulkAADJ tokens is reached for the tenant."
    },
    {
        "Error Code": "240001",
        "Message": "User is not authorized to register devices in Azure AD."
    },
    {
        "Error Code": "240002",
        "Message": "Input id_token cannot be used as 'urn:ietf:params:oauth:grant-type:jwt-bearer' grant."
    },
    {
        "Error Code": "240003",
        "Message": "Unexpected result from authorize endpoint call."
    },
    {
        "Error Code": "240004",
        "Message": "Authorization code not received from authorize endpoint call. Error: {errorInfo}"
    },
    {
        "Error Code": "250001",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "250002",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "250003",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "250004",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "250005",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "250006",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "293001",
        "Message": "Invalid target-machine. RDP connection was initiated to a different target-machine."
    },
    {
        "Error Code": "293002",
        "Message": "Proof-of-possesion validation failed."
    },
    {
        "Error Code": "293003",
        "Message": "RDP protocol is not supported for the requested client or resource application."
    },
    {
        "Error Code": "293004",
        "Message": "The target-device identifier in the request {targetDeviceId} was not found in the tenant {tenantId}."
    },
    {
        "Error Code": "392100",
        "Message": "Unable to locate a user using the provided user information."
    },
    {
        "Error Code": "392101",
        "Message": "User has not set up remote sign-in with the Authenticator app."
    },
    {
        "Error Code": "392102",
        "Message": "The session tracking token has expired."
    },
    {
        "Error Code": "392103",
        "Message": "The user has not yet addressed the request in the Authenticator app. Continue polling."
    },
    {
        "Error Code": "392104",
        "Message": "The authorization state is in an unexpected state."
    },
    {
        "Error Code": "392105",
        "Message": "The 'auth_req_id' provided is invalid."
    },
    {
        "Error Code": "392106",
        "Message": "The 'client_id' provided does not match the client ID provided to the /bc-authorize endpoint."
    },
    {
        "Error Code": "400051",
        "Message": "Malformed token received from external Identity Provider."
    },
    {
        "Error Code": "400131",
        "Message": "Claims Provider Federation disabled."
    },
    {
        "Error Code": "500011",
        "Message": "The resource principal named {name} was not found in the tenant named {tenant}. This can happen if the application has not been installed by the administrator of the tenant or consented to by any user in the tenant. You might have sent your authentication request to the wrong tenant.",
        "Remediation": "Developer error - the app requested access to a resource (application) that isn't installed in your tenant. If you expect the app to be installed, you may need to provide administrator permissions to add it. Check with the developers of the resource and application to understand what the right setup for your tenant is."
    },
    {
        "Error Code": "500012",
        "Message": "Resource application name '{name}' is not valid."
    },
    {
        "Error Code": "500013",
        "Message": "Resource identifier is not provided."
    },
    {
        "Error Code": "500014",
        "Message": "The service principal for resource '{identifier}' is disabled. This indicate that a subscription within the tenant has lapsed, or that the administrator for this tenant has disabled the application, preventing tokens from being issued for it."
    },
    {
        "Error Code": "500015",
        "Message": "MSA provisioned resources are not supported in the tenant named {tenant}."
    },
    {
        "Error Code": "500021",
        "Message": "Access to '{tenant}' tenant is denied.",
        "Remediation": "Please contact your IT department."
    },
    {
        "Error Code": "500022",
        "Message": "Access to '{tenant}' tenant is denied.",
        "Remediation": "Please contact your IT department."
    },
    {
        "Error Code": "500023",
        "Message": "'{headerFromCredential}' is not the same as '{headerFromRequest}'.",
        "Remediation": "A refresh token was received that was controlled under a different tenant restrictions policy than what was received on the request header. To prevent data leakage and bypass of security controls, the request was blocked. Users will need to sign out and sign back in to reset the tenant restrictions policy in their refresh token. This may not be possible if their device enforces one restriction, but the network they're on enforces another."
    },
    {
        "Error Code": "500024",
        "Message": "Conflicting tenant restrictions signals received by the server on the login request. The header indicated '{headerFromRequest}' while the application added a claims request for '{headerFromClaims}'. This can indicate conflicting network and device policies, which Azure AD does not support."
    },
    {
        "Error Code": "500025",
        "Message": "Conflicting tenant restrictions signals received by the server from a claims request. The header from the Id Token '{headerFromIdToken}' is different than the header from the access token '{headerFromAccessToken}'."
    },
    {
        "Error Code": "500031",
        "Message": "Cannot find signing certificate configured."
    },
    {
        "Error Code": "500032",
        "Message": "Cannot find signing certificate/private key to issue a certificate."
    },
    {
        "Error Code": "500061",
        "Message": "Assertion failed signature validation.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "500062",
        "Message": "Enveloped Signature Transform cannot be the last transform in the chain. The last transform must compute the digest which Enveloped Signature transform is not capable of."
    },
    {
        "Error Code": "500063",
        "Message": "The '{type}' input type is not supported for the transform."
    },
    {
        "Error Code": "500064",
        "Message": "The required attribute Algorithm in the element '{name}' is missing."
    },
    {
        "Error Code": "500065",
        "Message": "Enveloped Signature Transform does not support the algorithm '{algo}'."
    },
    {
        "Error Code": "500066",
        "Message": "Cannot resolve the '{uri}' URI in the signature to compute the digest."
    },
    {
        "Error Code": "500067",
        "Message": "Invalid signature. Cannot create a hash or a keyed hash algorithm using the '{method}' signature method."
    },
    {
        "Error Code": "500068",
        "Message": "Invalid signature. Cannot create a signature deformatter for the '{method}' signature method."
    },
    {
        "Error Code": "500069",
        "Message": "The element with ID '{id}' was either unsigned or the signature was invalid."
    },
    {
        "Error Code": "500081",
        "Message": "SAML assertion validation failed: no supported token signature is provided."
    },
    {
        "Error Code": "500082",
        "Message": "SAML assertion is not present in the token."
    },
    {
        "Error Code": "500083",
        "Message": "Unable to verify token signature. No trusted realm was found with identifier '{issuer}'."
    },
    {
        "Error Code": "500084",
        "Message": "Cannot read SecurityToken. Expected element is ({expectedName}, {expectedNamespace}) the actual element is ({localName}, {actualNamespace})."
    },
    {
        "Error Code": "500085",
        "Message": "SAML Assertion with MajorVersion '{actualMajor}' and MinorVersion '{actualMinor}' is not supported. The supported version is MajorVersion '{major}' and MinorVersion '{minor}'."
    },
    {
        "Error Code": "500086",
        "Message": "SAML Assertion AssertionId '{id}' is not a valid xsd:ID value."
    },
    {
        "Error Code": "500087",
        "Message": "SAML Assertion does not have any SAML Statement elements. SAML Assertion must have at least one SAML Statement element."
    },
    {
        "Error Code": "500088",
        "Message": "SAML Assertion is missing the required '{name}' Attribute."
    },
    {
        "Error Code": "500089",
        "Message": "SAML 2.0 assertion validation failed: {details}"
    },
    {
        "Error Code": "500101",
        "Message": "Audience URI validation failed. No token audiences were found."
    },
    {
        "Error Code": "500102",
        "Message": "Audience URI validation failed. No allowed audiences are configured."
    },
    {
        "Error Code": "500103",
        "Message": "Validation of Audience URI(s) {uri} failed. No match was found with allowed audience(s) {audience}."
    },
    {
        "Error Code": "500111",
        "Message": "The reply uri specified in the request has an invalid scheme."
    },
    {
        "Error Code": "500112",
        "Message": "The reply address '{actual}' does not match the reply address '{provided}' provided when requesting Authorization code."
    },
    {
        "Error Code": "500113",
        "Message": "No reply address is registered for the application{idPhrase}."
    },
    {
        "Error Code": "500114",
        "Message": "Protocol not specified for reply address validation."
    },
    {
        "Error Code": "500115",
        "Message": "The reply uri specified in the request is missing or not a valid URL."
    },
    {
        "Error Code": "500116",
        "Message": "The reply uri specified in the request is not a valid URL. Allowed schemes: '{schemes}'."
    },
    {
        "Error Code": "500117",
        "Message": "The reply uri specified in the request isn't using a secure scheme."
    },
    {
        "Error Code": "500118",
        "Message": "The reply uri specified in the request failed validation. The reply uri host must match one of the registered DNS host names '{host}' for site with ID '{id}'."
    },
    {
        "Error Code": "500119",
        "Message": "Redirect URIs with urn: schemes are prohibited. Use a different scheme, or https://login.microsoftonline.com/common/oauth2/nativeclient"
    },
    {
        "Error Code": "500121",
        "Message": "Authentication failed during strong authentication request.",
        "Remediation": "The user didn't complete the MFA prompt. They may have decided not to authenticate, timed out while doing other work, or has an issue with their authentication setup."
    },
    {
        "Error Code": "500122",
        "Message": "SWT assertion failed signature validation. Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "500123",
        "Message": "SWT assertion failed signature validation. Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "500124",
        "Message": "No device secret is provisioned in the store."
    },
    {
        "Error Code": "500125",
        "Message": "Invalid device secret is provided."
    },
    {
        "Error Code": "500126",
        "Message": "External ID token from issuer '{issuer}' failed signature verification. KeyID of token is '{identifier}'."
    },
    {
        "Error Code": "500127",
        "Message": "No authenticated credentials found in request."
    },
    {
        "Error Code": "500128",
        "Message": "No session key found."
    },
    {
        "Error Code": "500129",
        "Message": "No NGC transport key found."
    },
    {
        "Error Code": "500131",
        "Message": "Assertion audience does not match the Client app presenting the assertion. The audience in the assertion was '{tokenAudience}' and the expected audience is '{expectedAudience}' or one of the Application Uris of this application with App ID '{appId}'({appName}). The downstream client must request a token for the expected audience (the application that made the OBO request) and this application should use that token as the assertion.",
        "Remediation": "Assertion is invalid because of various reasons:      - The token issuer doesn't match the api version within its valid time range      - Expired      - Malformed      - Refresh token in the assertion is not a primary refresh token"
    },
    {
        "Error Code": "500132",
        "Message": "Assertion is malformed and cannot be read.",
        "Remediation": "Assertion is invalid because of various reasons:      - The token issuer doesn't match the api version within its valid time range      - Expired      - Malformed      - Refresh token in the assertion is not a primary refresh token"
    },
    {
        "Error Code": "500133",
        "Message": "Assertion is not within its valid time range. Ensure that the access token is not expired before using it for user assertion, or request a new token. Current time: {curTime}, expiry time of assertion {expTime}.",
        "Remediation": "Assertion is invalid because of various reasons:      - The token issuer doesn't match the api version within its valid time range      - Expired      - Malformed      - Refresh token in the assertion is not a primary refresh token"
    },
    {
        "Error Code": "500135",
        "Message": "Authentication code is missing in the assertion."
    },
    {
        "Error Code": "500136",
        "Message": "The token issuer doesn't match the api version: A version 2 token can only be used with the v2 endpoint."
    },
    {
        "Error Code": "500137",
        "Message": "The token issuer doesn't match the api version: A version 1 token cannot be used with the v2 endpoint."
    },
    {
        "Error Code": "500138",
        "Message": "No Refresh Token claim provided in the assertion."
    },
    {
        "Error Code": "500139",
        "Message": "Refresh token in the assertion is not a primary refresh token."
    },
    {
        "Error Code": "500171",
        "Message": "Certificate has been revoked."
    },
    {
        "Error Code": "500172",
        "Message": "Certificate '{name}' issued by '{issuer}' is not valid. Current time: '{curTime}'. Certificate NotBefore: '{startTime}'. Certificate NotAfter: '{endTime}'."
    },
    {
        "Error Code": "500173",
        "Message": "Unable to download CRL. Invalid status code {code} from CRL distribution point."
    },
    {
        "Error Code": "500174",
        "Message": "Unable to construct valid CRL from response."
    },
    {
        "Error Code": "500175",
        "Message": "Unable to find expected CrlSegment."
    },
    {
        "Error Code": "500176",
        "Message": "Cannot find issuing certificate in trusted certificates list."
    },
    {
        "Error Code": "500177",
        "Message": "Delta CRL distribution point is configured without a corresponding CRL distribution point."
    },
    {
        "Error Code": "500178",
        "Message": "Unable to retrieve valid CRL segments for {type}. Please try again later."
    },
    {
        "Error Code": "500179",
        "Message": "CRL validation timed out. Please try again later."
    },
    {
        "Error Code": "500180",
        "Message": "No TLS certificate was provided."
    },
    {
        "Error Code": "500181",
        "Message": "The TLS certificate provided does not match the certificate in the assertion."
    },
    {
        "Error Code": "500182",
        "Message": "The issuing certificate authority failed to validate because it is missing the required subject key identifier extension."
    },
    {
        "Error Code": "500183",
        "Message": "Certificate has been revoked."
    },
    {
        "Error Code": "500200",
        "Message": "User account '{email}' is a consumer account. Consumer guest accounts cannot sign in using the /common authority of the v1 endpoint - the app must specify which tenant authority to sign the user into."
    },
    {
        "Error Code": "500201",
        "Message": "We are unable to issue tokens from this API version for a Microsoft account. Please contact the application vendor as they need to use version 2.0 of the protocol to support this."
    },
    {
        "Error Code": "500202",
        "Message": "User account '{email}' from external identity provider '{idp}' is not supported for API version '{version}'. Microsoft account pass-thru users and guests are not supported by the tenant-independent endpoint."
    },
    {
        "Error Code": "500204",
        "Message": "Microsoft account '{email}' can’t be used to log in to application {appName}. Please get this user invited to {tenant} directory or sign out and sign in again with a Work or School account."
    },
    {
        "Error Code": "500205",
        "Message": "A consumer (B2C) account can't be used to log into non consumer applications."
    },
    {
        "Error Code": "500212",
        "Message": "The user's administrator has set an outbound access policy that does not allow access to the resource tenant.",
        "Remediation": "The user's administrator must update their cross-tenant access policy to allow access to the resource tenant."
    },
    {
        "Error Code": "500213",
        "Message": "The resource tenant's cross-tenant access policy does not allow this user to access this tenant.",
        "Remediation": "This block occurred due to the resource tenant's cross-tenant access policy. Contact that tenant's administrator to ensure that these users are allowed access."
    },
    {
        "Error Code": "500241",
        "Message": "The reader is not positioned on an EncryptedKey element that can be read."
    },
    {
        "Error Code": "500242",
        "Message": "A ReferenceList must contain at least one reference, none were found."
    },
    {
        "Error Code": "500243",
        "Message": "The reader is not positioned on a KeyReference. XmlEnc specifies that once a KeyReference is found only a KeyReference must exist."
    },
    {
        "Error Code": "500244",
        "Message": "The reader is not positioned on a DataReference. XmlEnc specifies that once a DataReference is found only a DataReference must exist."
    },
    {
        "Error Code": "500245",
        "Message": "The key identifier must be set before writing the encrypted data element."
    },
    {
        "Error Code": "500246",
        "Message": "The reader is not positioned on an EncryptedData element that can be read."
    },
    {
        "Error Code": "500247",
        "Message": "No CipherData present in EncryptedData element."
    },
    {
        "Error Code": "500248",
        "Message": "The reader is not positioned on a CipherData element that can be read."
    },
    {
        "Error Code": "500251",
        "Message": "The issuer name cannot be {name}."
    },
    {
        "Error Code": "500252",
        "Message": "The issuer name is too long, maximum length is {length}."
    },
    {
        "Error Code": "500271",
        "Message": "ID Token doesn't contain nonce claim."
    },
    {
        "Error Code": "500272",
        "Message": "ID Token doesn't contain sub claim."
    },
    {
        "Error Code": "500273",
        "Message": "Invalid JWT token. Subject identifier mismatch."
    },
    {
        "Error Code": "500274",
        "Message": "ID Token doesn't contain expected claim: {claim}."
    },
    {
        "Error Code": "500275",
        "Message": "Duplicated claim found in ID Token claims."
    },
    {
        "Error Code": "500276",
        "Message": "Token presented by external Identity Provider has failed signature validation."
    },
    {
        "Error Code": "500277",
        "Message": "External ID Token has unexpected issuer: {issuer}."
    },
    {
        "Error Code": "500278",
        "Message": "External ID Token issued to unexpected audience: {audience}."
    },
    {
        "Error Code": "500279",
        "Message": "External ID Token is not within its valid time range. Current time: {curTime}, expiry time of assertion {expTime}."
    },
    {
        "Error Code": "500301",
        "Message": "The audience {audience} in assertion is not included in forwardableOnBehalfOfOriginsAcceptedAudiencesList for PFT OBO flow.",
        "Remediation": "The application owner must update their app registration to indicate that this is an expected audience."
    },
    {
        "Error Code": "500302",
        "Message": "The client id {appId} in subassertion (actor token) is not included in forwardableOnBehalfOfOriginsAcceptedPrecedingAppsList for PFT OBO flow.",
        "Remediation": "The app owner must update the app registration to include the appid as an expected sender of PFTs."
    },
    {
        "Error Code": "500303",
        "Message": "The Audience {audience} in Jwt Subassertion does not match the client."
    },
    {
        "Error Code": "500331",
        "Message": "An error occurred while attempting to create a certificate from bytes."
    },
    {
        "Error Code": "500341",
        "Message": "The user account {identifier} has been deleted from the {tenant} directory. To sign into this application, the account must be added to the directory.",
        "Remediation": "To sign into this application, the account must be added to the directory. If the user account is deleted from the tenant, see these docs to restore the user: https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-users-restore"
    },
    {
        "Error Code": "500342",
        "Message": "User account is not configured for remote NGC."
    },
    {
        "Error Code": "500343",
        "Message": "Could not create remote sign-in session."
    },
    {
        "Error Code": "500344",
        "Message": "User Account is not found for Fido Sign in flow."
    },
    {
        "Error Code": "500346",
        "Message": "E-Mail OTP user cannot sign in with local password."
    },
    {
        "Error Code": "500501",
        "Message": "Invalid value for '{apiVersion}'."
    },
    {
        "Error Code": "500502",
        "Message": "Expected exactly one of '{issuer}' and '{authEndpoint}'."
    },
    {
        "Error Code": "500531",
        "Message": "The sign-in was blocked because it came from an IP blocked for legal reasons.",
        "Remediation": "The sign-in was blocked because it came from an IP blocked for legal reasons."
    },
    {
        "Error Code": "500571",
        "Message": "The guest user account is disabled.",
        "Remediation": "The guest user object in Active Directory backing this account has been disabled. An admin can re-enable this account through Powershell: https://docs.microsoft.com/powershell/module/addsadministration/enable-adaccount?view=win10-ps"
    },
    {
        "Error Code": "500581",
        "Message": "Rendering JavaScript. Fetching sessions for single-sign-on on V2 with prompt=none requires javascript to verify if any MSA accounts are signed in.",
        "Remediation": "Intermediate step during SSO, and does not represent an error"
    },
    {
        "Error Code": "500582",
        "Message": "Microsoft Account session_id with prompt=none not supported on AAD tenant."
    },
    {
        "Error Code": "500583",
        "Message": "Storage Access required."
    },
    {
        "Error Code": "500761",
        "Message": "Due to a configuration change made by your administrator, or because you moved to a new location, the service principal '{servicePrincipal}' must use a certificate for authentication to access '{resource}'.",
        "Remediation": "Service principal needs to perform multi-factor authentication by using certificate."
    },
    {
        "Error Code": "500881",
        "Message": "Limit on telecom MFA calls reached. Please retry with PhoneAppNotification or try again in a few minutes."
    },
    {
        "Error Code": "500882",
        "Message": "Limit on telecom MFA calls reached. Please retry with PhoneAppCode or try again in a few minutes."
    },
    {
        "Error Code": "500981",
        "Message": "Malformed JWT token."
    },
    {
        "Error Code": "500982",
        "Message": "Unexpected field '{field}' in JWT header."
    },
    {
        "Error Code": "500983",
        "Message": "JWT header must contain '{field}'."
    },
    {
        "Error Code": "500984",
        "Message": "Unsupported signing algorithm."
    },
    {
        "Error Code": "500985",
        "Message": "Unexpected JWT token header type."
    },
    {
        "Error Code": "500986",
        "Message": "Unexpected field '{field}' in JWT body."
    },
    {
        "Error Code": "500991",
        "Message": "Unexpected AuthToken audience. Expected token audience: '{expected}', Actual token audience: '{actual}'."
    },
    {
        "Error Code": "500992",
        "Message": "Public Key Authentication assertion signature is invalid."
    },
    {
        "Error Code": "501051",
        "Message": "Application '{appId}'({appName}) is not assigned to a role for the application '{resourceId}'({resourceName})."
    },
    {
        "Error Code": "501111",
        "Message": "JWT tokens are not supported by FederatedAppsClaimsTransformer."
    },
    {
        "Error Code": "501201",
        "Message": "Unexpected claim(s) in JWT: {claims}."
    },
    {
        "Error Code": "501202",
        "Message": "Unexpected grant type in JWT."
    },
    {
        "Error Code": "501203",
        "Message": "Nonce is required in JWT."
    },
    {
        "Error Code": "501204",
        "Message": "Malformed JWT."
    },
    {
        "Error Code": "501205",
        "Message": "Unexpected field '{name}' in JWT header."
    },
    {
        "Error Code": "501206",
        "Message": "JWT header must contain '{name}'."
    },
    {
        "Error Code": "501207",
        "Message": "Unsupported algorithm."
    },
    {
        "Error Code": "501208",
        "Message": "Unexpected JWT token type."
    },
    {
        "Error Code": "501209",
        "Message": "JWT signature is invalid."
    },
    {
        "Error Code": "501210",
        "Message": "Assertion is null or empty."
    },
    {
        "Error Code": "501241",
        "Message": "Mandatory Input '{paramName}' missing from transformation id '{transformId}'."
    },
    {
        "Error Code": "501242",
        "Message": "ClaimsTransformations with ID '{identifier}' contains an unsupported InputClaim.Source '{source}'."
    },
    {
        "Error Code": "501271",
        "Message": "Broker app needs to be installed for device authentication to succeed."
    },
    {
        "Error Code": "501291",
        "Message": "Client app is a Mam app, device is not registered and request is sent using a broker. Work place join needs to be done to register the device before the app can be accessed."
    },
    {
        "Error Code": "501292",
        "Message": "Client application cannot satisfy app protection requirement. If it's a first party app, then it's not whitelisted to be used with app protection policies, otherwise, the app has not advertised as app-compliant capable, or the authentication library used does not support app protection policies."
    },
    {
        "Error Code": "501311",
        "Message": "Browser not supported."
    },
    {
        "Error Code": "501312",
        "Message": "Device used during the authentication is not registered for the account."
    },
    {
        "Error Code": "501313",
        "Message": "Your device is required to be managed to access this resource."
    },
    {
        "Error Code": "501314",
        "Message": "Silent interrupt required to recognize browser capabilities. Used to differentiate between Safari running in iPadOS or Mac.",
        "Remediation": "No action required, this is expected as part of determining device identities due to application or conditional access requirements."
    },
    {
        "Error Code": "501431",
        "Message": "Session is invalid due to different resource."
    },
    {
        "Error Code": "501461",
        "Message": "AcceptMappedClaims is only supported for a token audience matching the application GUID or an audience within the tenant's verified domains. Either change the resource identifier, or use an application-specific signing key."
    },
    {
        "Error Code": "501471",
        "Message": "Missing code_challenge parameter."
    },
    {
        "Error Code": "501481",
        "Message": "The Code_Verifier does not match the code_challenge supplied in the authorization request."
    },
    {
        "Error Code": "501482",
        "Message": "The Code_Verifier length is less than invalid."
    },
    {
        "Error Code": "501491",
        "Message": "Invalid size of Code_Challenge parameter."
    },
    {
        "Error Code": "501571",
        "Message": "User routing cookie missing."
    },
    {
        "Error Code": "501591",
        "Message": "Missing claim requested to external provider."
    },
    {
        "Error Code": "501592",
        "Message": "idToken doesn't contain expected claim: '{claim}'."
    },
    {
        "Error Code": "501593",
        "Message": "Value of {type} claim in idToken: {value} doesn't match expected values: {expected}"
    },
    {
        "Error Code": "501621",
        "Message": "Regular expression replacement for claims transformation has timed out. This indicates a too complex regular expression may have been configured for this application. A retry of the request may succeed. Otherwise, please contact your admin to fix the configuration."
    },
    {
        "Error Code": "501631",
        "Message": "Regular expression replacement for claims transformation results in too many replacements in the input sourceClaim. Please contact your admin to fix the configuration."
    },
    {
        "Error Code": "501632",
        "Message": "Regular expression replacement for claims transformation has too many substitution parameters in the replacement input parameter. Please contact your admin to fix the configuration."
    },
    {
        "Error Code": "501661",
        "Message": "Request to External OIDC endpoint failed."
    },
    {
        "Error Code": "501791",
        "Message": "Client_info is only supported for MSAL/ADAL, please ensure that MSAL/ADAL custom headers are being sent."
    },
    {
        "Error Code": "501811",
        "Message": "No otp for the given tenant/user."
    },
    {
        "Error Code": "501831",
        "Message": "Cannot generate more one time passcode due to cache exception."
    },
    {
        "Error Code": "501941",
        "Message": "Resource '{resourceId}'({resourceName}) is not configured as a multi-tenant application. Usage of the /common endpoint is not supported for such applications created after '{time}'. Use a tenant-specific endpoint or configure the application to be multi-tenant."
    },
    {
        "Error Code": "510001",
        "Message": "Cannot meet the requirements stated in the request."
    },
    {
        "Error Code": "530001",
        "Message": "Browser not supported.",
        "Remediation": "The user is using a browser that does not support device identification so the device state is unknown. Access to the resource requires a compliant device. To see a list of browsers that support device identification, see https://docs.microsoft.com/azure/active-directory/conditional-access/technical-reference#supported-browsers"
    },
    {
        "Error Code": "530002",
        "Message": "Your device is required to be compliant to access this resource.",
        "Remediation": "The requested resource can only be accessed using a compliant device. The user is using a device already managed by a Mobile-Device-Management (MDM) agent like Intune, but it's not being reported as compliant yet. The user could check with your MDM provider on how to become compliant. More details available at https://docs.microsoft.com/azure/active-directory/active-directory-conditional-access-device-remediation"
    },
    {
        "Error Code": "530003",
        "Message": "Your device is required to be managed to access this resource.",
        "Remediation": "The requested resource can only be accessed using a compliant device. The user is either using a device not managed by a Mobile-Device-Management (MDM) agent like Intune, or it's using an application that doesn't support device authentication. The user could enroll their devices with an approved MDM provider, or use a different app to sign in, or find the app vendor and ask them to update their app. More details available at https://docs.microsoft.com/azure/active-directory/active-directory-conditional-access-device-remediation"
    },
    {
        "Error Code": "530004",
        "Message": "AcceptCompliantDevice setting isn't configured for this organization. The admin needs to configure this setting to allow external users access to protected resources.",
        "Remediation": "AcceptCompliantDevice setting isn't configured for this organization. The admin needs to configure this setting to allow external users access to protected resources."
    },
    {
        "Error Code": "530011",
        "Message": "Browser not supported.",
        "Remediation": "The user is using a browser that does not support device identification so the device state is unknown. Access to the resource requires a Hybrid Azure AD joined device. To see a list of browsers that support device identification, see https://docs.microsoft.com/azure/active-directory/conditional-access/technical-reference#supported-browsers"
    },
    {
        "Error Code": "530021",
        "Message": "Application does not meet the conditional access approved app requirements.",
        "Remediation": "Application used is not an approved application for conditional access. User needs to use one of the apps from the list of approved applications to use in order to get access. To see a list of approved apps, see https://docs.microsoft.com/azure/active-directory/conditional-access/technical-reference#approved-client-app-requirement"
    },
    {
        "Error Code": "530022",
        "Message": "Browser not supported.",
        "Remediation": "Application used is not an approved application for conditional access. User needs to use one of the apps from the list of approved applications to use in order to get access. To see a list of approved apps, see https://docs.microsoft.com/azure/active-directory/conditional-access/technical-reference#approved-client-app-requirement"
    },
    {
        "Error Code": "530031",
        "Message": "Access policy does not allow token issuance.",
        "Remediation": "A classic conditional access policy, or a policy from Azure AD Identity Protection, prevented this resource from being accessed. View the Conditional Access information for this request in the sign-in logs for more details about the policy applied here."
    },
    {
        "Error Code": "530032",
        "Message": "User blocked due to risk on home tenant.",
        "Remediation": "If this user is risky in your tenant, learn more here: aka.ms/unblockrisk. If this is a guest user, learn more here: aka.ms/riskyguestuser."
    },
    {
        "Error Code": "530033",
        "Message": "Remote device flow blocked due to device based conditional access.",
        "Remediation": "This request is authorizing a remote device, and there is a conditional access policy that requires device authentication. The request is blocked because we cannot assert the properties of the remote device. View the Conditional Access information for this request in the sign-in logs for more details about the policy applied here."
    },
    {
        "Error Code": "530034",
        "Message": "A delegated administrator was blocked from accessing the tenant due to account risk.",
        "Remediation": "Azure AD blocked delegated administrator access due to account risk in their home tenant."
    },
    {
        "Error Code": "530081",
        "Message": "Managed browser or Microsoft Edge is required for device registration to succeed."
    },
    {
        "Error Code": "530082",
        "Message": "Workplace join is required to register the device.",
        "Remediation": "User is required to add their work account to the device. To learn more, see https://docs.microsoft.com/azure/active-directory/active-directory-conditional-access-device-remediation"
    },
    {
        "Error Code": "600071",
        "Message": "An error occurred while attempting to create a certificate from bytes."
    },
    {
        "Error Code": "650011",
        "Message": "The user or administrator has not consented to use the application with ID '{identifier}'{namePhrase}. Send an interactive authorization request for this user and resource. Alternatively, the Application URI {uri} for the App:'{appId}'{name} in the tenant '{tenant}' might be in conflict with the Application URI for the multitenant app '{conflict}'. Update the registered Application URI to something else to avoid the conflict."
    },
    {
        "Error Code": "650041",
        "Message": "User terminated the request."
    },
    {
        "Error Code": "650051",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "650052",
        "Message": "The app needs access to a service ('{name}') that your organization '{organization}' has not subscribed to or enabled. Contact your IT Admin to review the configuration of your service subscriptions.",
        "Remediation": "Contact your IT Admin to review the configuration of your service subscriptions."
    },
    {
        "Error Code": "650053",
        "Message": "The application '{name}' asked for scope '{scope}' that doesn't exist on the resource '{resource}'. Contact the app vendor."
    },
    {
        "Error Code": "650054",
        "Message": "The application '{name}' asked for permissions to access a resource that has been removed or is no longer available. Contact the app vendor."
    },
    {
        "Error Code": "650055",
        "Message": "The application '{name}' required resource access list does not contain applications discoverable by '{resource}'."
    },
    {
        "Error Code": "650056",
        "Message": "Misconfigured application. This could be due to one of the following: the client has not listed any permissions for '{name}' in the requested permissions in the client's application registration. Or, the admin has not consented in the tenant. Or, check the application identifier in the request to ensure it matches the configured client application identifier. Or, check the certificate in the request to ensure it's valid. Please contact your admin to fix the configuration or consent on behalf of the tenant. Client app ID: {id}.",
        "Remediation": "Please contact your admin to fix the configuration or consent on behalf of the tenant."
    },
    {
        "Error Code": "650057",
        "Message": "Invalid resource. The client has requested access to a resource which is not listed in the requested permissions in the client's application registration. Client app ID: {appId}({appName}). Resource value from request: {resource}. Resource app ID: {resourceAppId}. List of valid resources from app registration: {regList}."
    },
    {
        "Error Code": "650058",
        "Message": "The app needs access to a service that your organization has not subscribed to or enabled. Contact your IT Admin to review the configuration of your service subscriptions."
    },
    {
        "Error Code": "650061",
        "Message": "Requested permission ID: '{permissionId}' in the resource access for client '{clientId}' has an invalid type. Please followup with the owner of Resource '{resourceId}' to fix the resource entitlement configuration."
    },
    {
        "Error Code": "699981",
        "Message": "OfficeS2S delegation service endpoints are not supported for calling application '{appId}'({appName})."
    },
    {
        "Error Code": "700001",
        "Message": "Application: {samlAudience} needs to opt-in for 'aio' optional claim for On Behalf Of flow to work with SAML tokens issued to this application",
        "Remediation": "Invalid grant due to the following reasons:      - Requested SAML 2.0 assertion has invalid Subject Confirmation Method      - Application On-Behalf-Of flow is not supported on V2      - Primary refresh token is not signed with session key      - Invalid external refresh token      - The access grant was obtained for a different tenant"
    },
    {
        "Error Code": "700002",
        "Message": "SAML 1.1 Bearer assertion must be a valid Base64 encoded value."
    },
    {
        "Error Code": "700003",
        "Message": "Device object was not found in the tenant '{tenantName}' directory.",
        "Remediation": "Invalid grant due to the following reasons:      - Requested SAML 2.0 assertion has invalid Subject Confirmation Method      - Application On-Behalf-Of flow is not supported on V2      - Primary refresh token is not signed with session key      - Invalid external refresh token      - The access grant was obtained for a different tenant"
    },
    {
        "Error Code": "700004",
        "Message": "onpremobjectguid '{objGuid}' attribute in the presented grant is malformed.",
        "Remediation": "Invalid grant due to the following reasons:      - Requested SAML 2.0 assertion has invalid Subject Confirmation Method      - Application On-Behalf-Of flow is not supported on V2      - Primary refresh token is not signed with session key      - Invalid external refresh token      - The access grant was obtained for a different tenant"
    },
    {
        "Error Code": "700005",
        "Message": "Provided Authorization Code is intended to use against other tenant, thus rejected.",
        "Remediation": "OAuth2 Authorization Code must be redeemed against same tenant it was acquired for."
    },
    {
        "Error Code": "700006",
        "Message": "The Audience: {audience} of the token is NOT an absolute Uri"
    },
    {
        "Error Code": "700007",
        "Message": "The grant was issued for a different client id."
    },
    {
        "Error Code": "700008",
        "Message": "Social IDP users are not expected to have home tenant."
    },
    {
        "Error Code": "700009",
        "Message": "Reply address must be provided when presenting an authorization code requested with an explicit reply address."
    },
    {
        "Error Code": "700011",
        "Message": "Application with identifier {appIdentifier} was not found in the directory.",
        "Remediation": "A client application requested a token from your tenant, but the client app doesn't exist in your tenant, so the call failed."
    },
    {
        "Error Code": "700012",
        "Message": "Missing Authorization header with bearer token. Client was not authenticated."
    },
    {
        "Error Code": "700013",
        "Message": "Client is not authorized to request managed browser purpose token."
    },
    {
        "Error Code": "700014",
        "Message": "Mobile Edge app needs to provide an enrollment id in order to acquire a purpose token that can satisfy the compliant app requirement."
    },
    {
        "Error Code": "700016",
        "Message": "Application with identifier '{appIdentifier}' was not found in the directory '{tenantName}'. This can happen if the application has not been installed by the administrator of the tenant or consented to by any user in the tenant. You may have sent your authentication request to the wrong tenant.",
        "Remediation": "The application named X was not found in the tenant named Y. This can happen if the application with identifier X has not been installed by the administrator of the tenant or consented to by any user in the tenant. You might have misconfigured the Identifier value for the application or sent your authentication request to the wrong tenant"
    },
    {
        "Error Code": "700017",
        "Message": "{resourceConstant} '{resourceIdentifier}' is not supported as resource."
    },
    {
        "Error Code": "700018",
        "Message": "{resourceConstant} '{resourceIdentifier}' is not supported as resource."
    },
    {
        "Error Code": "700019",
        "Message": "Application ID {identifier} cannot be used or is not authorized."
    },
    {
        "Error Code": "700020",
        "Message": "Application ID {identifier} is a reserverd identifier and should be removed on the application: {applicationId}."
    },
    {
        "Error Code": "700021",
        "Message": "Client assertion application identifier doesn't match 'client_id' parameter. Review the documentation at https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials .",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "700022",
        "Message": "No Subject claim provided in the assertion. Review the documentation at https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials ."
    },
    {
        "Error Code": "700023",
        "Message": "Client assertion audience claim does not match Realm issuer. Review the documentation at https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials ."
    },
    {
        "Error Code": "700024",
        "Message": "Client assertion is not within its valid time range. Current time: {curTime}, expiry time of assertion {expTime}. Review the documentation at https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials .",
        "Remediation": "The app used an expired client assertion. It needs to be updated in the Azure Portal to generate a new client secret or certificate."
    },
    {
        "Error Code": "700025",
        "Message": "Client is public so neither 'client_assertion' nor 'client_secret' should be presented."
    },
    {
        "Error Code": "700026",
        "Message": "Client application has no configured keys."
    },
    {
        "Error Code": "700027",
        "Message": "Client assertion failed signature validation.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "700028",
        "Message": "Certificate with thumbprint {thumbprint} is not authorized.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "700029",
        "Message": "Invalid signing certificate."
    },
    {
        "Error Code": "700030",
        "Message": "Invalid certificate - subject name in certificate is not authorized. SubjectNames/SubjectAlternativeNames (up to 10) in token certificate are: {certificateSubjects}."
    },
    {
        "Error Code": "700031",
        "Message": "Invalid certificate - SubjectName or SubjectAlternativeName is missing"
    },
    {
        "Error Code": "700032",
        "Message": "Invalid certificate - Trusted Certificate Subjects for application are missing"
    },
    {
        "Error Code": "700033",
        "Message": "Client assertion should declare both custom_claims and xms_actor_token claims when overriding managed resource ID."
    },
    {
        "Error Code": "700034",
        "Message": "Client assertion contains an invalid xms_actor_token claim."
    },
    {
        "Error Code": "700035",
        "Message": "Client assertion contains custom_claims in the incorrect format."
    },
    {
        "Error Code": "700036",
        "Message": "Client is not authorized to override managed identity claim in the token."
    },
    {
        "Error Code": "700037",
        "Message": "Client assertion must declare x5c header when overriding managed resource ID."
    },
    {
        "Error Code": "700038",
        "Message": "00000000-0000-0000-0000-000000000000 is not a valid application identifier."
    },
    {
        "Error Code": "700039",
        "Message": "00000000-0000-0000-0000-000000000000 is not a valid resource identifier"
    },
    {
        "Error Code": "700040",
        "Message": "Managed Resource ID '{inputManagedResourceId}' is not a valid resource identifier."
    },
    {
        "Error Code": "700041",
        "Message": "Post-logout redirect uri is not in approved list. Requested post-logout url: {url}."
    },
    {
        "Error Code": "700042",
        "Message": "The reply address does not match the reply addresses configured for the application."
    },
    {
        "Error Code": "700043",
        "Message": "The redirect address '{address}' does not match the redirect addresses configured for service identity '{serviceId}'."
    },
    {
        "Error Code": "700044",
        "Message": "The redirect address '{address}' corresponding to this authorization code does not match the redirect address '{requestAddress}' specified in the request."
    },
    {
        "Error Code": "700045",
        "Message": "Redirect address '{address}' specified by the client does not match any configured addresses '{configuredAddress}' or any addresses on the OIDC approve list."
    },
    {
        "Error Code": "700046",
        "Message": "Invalid Reply Address. Reply Address must have scheme brk-{brkApplicationId}:// and be of Single Page Application type."
    },
    {
        "Error Code": "700047",
        "Message": "Invalid Reply Address. Broker must use Single-Page Application Reply Address."
    },
    {
        "Error Code": "700048",
        "Message": "Client assertion contains an invalid xms_actor_token claim. The audience of the claim is not correctly set."
    },
    {
        "Error Code": "700049",
        "Message": "Claim override is only allowed for User Assigned Managed Service Identities. Make sure the caller app is a Managed Identity, and the override is being done for a User Assigned identity."
    },
    {
        "Error Code": "700050",
        "Message": "Actor token is not within its valid time range. Current time: {curTime}, expiry time of actor token {expTime}."
    },
    {
        "Error Code": "700051",
        "Message": "response_type 'token' is not enabled for the application.",
        "Remediation": "The application requested an unsupported response type due to the following reasons: response_type 'token' is not enabled for the application. Application owner should go to the Azure portal or call MS Graph to enable the implicit access token grant."
    },
    {
        "Error Code": "700052",
        "Message": "The token request contains one or more unsupported response token type(s): '{ResType}'."
    },
    {
        "Error Code": "700053",
        "Message": "response_type 'id_token' requires the 'openid' scope."
    },
    {
        "Error Code": "700054",
        "Message": "response_type 'id_token' is not enabled for the application.",
        "Remediation": "The application requested an unsupported response type due to the following reasons: response_type 'id_token' is not enabled for the application. Application owner should go to the Azure portal or call MS Graph to enable the implicit id token grant."
    },
    {
        "Error Code": "700055",
        "Message": "Redirection to B2C first party app is permitted only to the /authresp endpoint."
    },
    {
        "Error Code": "700081",
        "Message": "The refresh token has expired due to maximum lifetime. The token was issued on {issueDate} and the maximum allowed lifetime for this application is {time}.",
        "Remediation": "Expected part of the token lifecycle - the user went an extended period of time without using the application, so the token was expired when the app attempted to refresh it."
    },
    {
        "Error Code": "700082",
        "Message": "The refresh token has expired due to inactivity. The token was issued on {issueDate} and was inactive for {time}.",
        "Remediation": "Expected part of the token lifecycle - the user went an extended period of time without using the application, so the token was expired when the app attempted to refresh it."
    },
    {
        "Error Code": "700083",
        "Message": "The primary refresh token has expired due to maximum lifetime. The token was issued on {issueDate} and the maximum allowed lifetime for this application is {time}."
    },
    {
        "Error Code": "700084",
        "Message": "The refresh token was issued to a single page app (SPA), and therefore has a fixed, limited lifetime of {time}, which cannot be extended. It is now expired and a new sign in request must be sent by the SPA to the sign in page. The token was issued on {issueDate}.",
        "Remediation": "Single page apps receive fixed, shorter-lived refresh tokens, and are expected to encounter this error on a regular basis. Apps must handle this error by redirecting the user to the sign in page for a refreshed sign in session."
    },
    {
        "Error Code": "700171",
        "Message": "End-user declined to authorize the request."
    },
    {
        "Error Code": "700172",
        "Message": "Authentication loop detected: please check application's configuration."
    },
    {
        "Error Code": "700221",
        "Message": "Issuer from the provided JWT '{jwtIssuer}' does not match the issuer published in the OIDC discovery metadata ('{metadataIssuer}') registered for this federated credential.",
        "Remediation": "Ensure that the OpenID Connect metadata issuer matches issuer presented in the JWT."
    },
    {
        "Error Code": "700222",
        "Message": "AAD-issued tokens may not be used for federated identity flows.",
        "Remediation": "The federated identity credentials flow does not support tokens issued by Azure AD at this time."
    },
    {
        "Error Code": "700311",
        "Message": "Remote auth session in cache is invalid."
    },
    {
        "Error Code": "701011",
        "Message": "Unable to save code into cache."
    },
    {
        "Error Code": "701012",
        "Message": "Unable to create remote auth session in device flow cache."
    },
    {
        "Error Code": "701013",
        "Message": "Unable to create remote auth session for user in activity store."
    },
    {
        "Error Code": "701014",
        "Message": "Cannot generate more one time passcodes."
    },
    {
        "Error Code": "750011",
        "Message": "Cannot validate RelayState. Check that RequestDataStorage is properly configured."
    },
    {
        "Error Code": "750012",
        "Message": "RelayState of response does not match with RelayState from request. Expected '{expected}' actual '{actual}'."
    },
    {
        "Error Code": "750013",
        "Message": "Cannot serialize SAML message container with no endpoint specified."
    },
    {
        "Error Code": "750014",
        "Message": "Could not find a SAMLRequest or SAMLResponse in the message. Check if the request contains a valid Uri or Form Post that contains protocol parameters for SAML HTTP bindings."
    },
    {
        "Error Code": "750015",
        "Message": "Wrong SAML message type '{wrongType}', expected '{expectedType}'."
    },
    {
        "Error Code": "750016",
        "Message": "Parameter '{name}' must be unique in HTTP SAML message."
    },
    {
        "Error Code": "750017",
        "Message": "The specified encoding method '{actual}' is not supported. Use '{expected}' encoding instead."
    },
    {
        "Error Code": "750018",
        "Message": "The signature algorithm '{algo}' is not valid."
    },
    {
        "Error Code": "750019",
        "Message": "The query string hash could not be computed for signature generation/validation. Neither SAMLRequest nor SAMLResponse was present in the message."
    },
    {
        "Error Code": "750031",
        "Message": "The requested protocol binding '{reqBinding}' is not supported. The supported bindings are GET (HTTP Redirect) and POST.",
        "Remediation": "Use either HTTP Redirect binding or HTTP Post binding to send the SAML AuthnRequest or LogoutRequest."
    },
    {
        "Error Code": "750032",
        "Message": "SAML protocol response cannot be sent via bindings other than HTTP POST. Requested binding: {reqBinding}",
        "Remediation": "In the SAML AuthnRequest, specify POST as the ProtocolBinding."
    },
    {
        "Error Code": "750051",
        "Message": "Must specify HTTP POST operation for SAML POST binding."
    },
    {
        "Error Code": "750052",
        "Message": "SAMLRequest or SAMLResponse must be present in body of HTTP request for SAML POST binding.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "750053",
        "Message": "Must specify HTTP GET operation for SAML HTTP Redirect binding."
    },
    {
        "Error Code": "750054",
        "Message": "SAMLRequest or SAMLResponse must be present as query string parameters in HTTP request for SAML Redirect binding.",
        "Remediation": "Azure AD wasn't able to identify the SAML request within the URL parameters in the HTTP request. This can happen if the application is not using HTTP Redirect Binding for sending the SAML request to Azure AD.    The application needs to send the SAML request encoded into the location header using HTTP Redirect Binding. For more information about how to implement it, read the section HTTP Redirect Binding in the SAML protocol specification document.[https://docs.oasis-open.org/security/saml/v2.0/saml-bindings-2.0-os.pdf]"
    },
    {
        "Error Code": "750055",
        "Message": "SAML message was not properly DEFLATE-encoded."
    },
    {
        "Error Code": "750056",
        "Message": "SAML message was not properly base64-encoded."
    },
    {
        "Error Code": "750057",
        "Message": "SAML message was not properly UTF8-encoded."
    },
    {
        "Error Code": "750058",
        "Message": "XML attribute '{attributeName}' in the SAML message must be a boolean."
    },
    {
        "Error Code": "750059",
        "Message": "XML attribute '{attributeName}' in the SAML message must be an integer."
    },
    {
        "Error Code": "750161",
        "Message": "Allowed SAML authentication request's NameIDPolicy formats are: {format}."
    },
    {
        "Error Code": "800111",
        "Message": "Encryption keys retrieved is null or empty."
    },
    {
        "Error Code": "800181",
        "Message": "Invalid configuration detected causing multiple redirects."
    },
    {
        "Error Code": "800182",
        "Message": "Failed to determine on-premises password validation endpoints for request."
    },
    {
        "Error Code": "800183",
        "Message": "The on-premises region configuration is invalid for the tenant."
    },
    {
        "Error Code": "800184",
        "Message": "The on-premises password validation request was throttled."
    },
    {
        "Error Code": "900000",
        "Message": "Environment error."
    },
    {
        "Error Code": "900001",
        "Message": "The browser is having problems downloading resources from the CDN (Content Delivery Network). Please check with your organization's system administrators to ensure that they have not blocked the resource url endpoint and that the files exists and are accessible."
    },
    {
        "Error Code": "900021",
        "Message": "Requested tenant identifier '{tenant_id}' is not valid. Tenant identifiers may not be an empty GUID."
    },
    {
        "Error Code": "900022",
        "Message": "Provided tenant identifier is empty."
    },
    {
        "Error Code": "900023",
        "Message": "Specified tenant identifier '{tenant_id}' is neither a valid DNS name, nor a valid external domain.",
        "Remediation": "Application error - the login request was malformed and could not be matched with an existing authentication endpoint or instance."
    },
    {
        "Error Code": "900041",
        "Message": "The request contains {num} tokens separated by '{splitter}' instead of a single key value pair."
    },
    {
        "Error Code": "900042",
        "Message": "Authorization header is missing or malformed."
    },
    {
        "Error Code": "900043",
        "Message": "Bad request. Passed context cannot be parsed."
    },
    {
        "Error Code": "900044",
        "Message": "Only version {num} of PKeyAuth is supported."
    },
    {
        "Error Code": "900045",
        "Message": "Missing PKeyAuth Authorization header."
    },
    {
        "Error Code": "900046",
        "Message": "Unprotected credential key parsing failed: invalid JWE format."
    },
    {
        "Error Code": "900047",
        "Message": "Malformed PKeyAuth header."
    },
    {
        "Error Code": "900048",
        "Message": "Request too large."
    },
    {
        "Error Code": "900049",
        "Message": "Malformed request."
    },
    {
        "Error Code": "900051",
        "Message": "Unable to complete request. The request was invalid since sid and domain_hint cannot be used together."
    },
    {
        "Error Code": "900052",
        "Message": "Request body may not be encoded in UTF-16."
    },
    {
        "Error Code": "900053",
        "Message": "Request body must not begin with UTF-8 BOM."
    },
    {
        "Error Code": "900054",
        "Message": "Specified Broker Client ID does not match ID in provided grant."
    },
    {
        "Error Code": "900055",
        "Message": "Broker Client ID expected in GUID format."
    },
    {
        "Error Code": "900056",
        "Message": "redirect_uri is a required parameter for brokered authentication."
    },
    {
        "Error Code": "900057",
        "Message": "Unexpected 'brk_client_id' or 'brk_redirect_uri' parameters when obtaining or redeeming grants for broker application."
    },
    {
        "Error Code": "900058",
        "Message": "Server cannot satisfy the request. MSIs do not support user-based flows, only the client credentials flow. Use a multi-tenant application and secret or certificate in order to sign in users at this time.",
        "Remediation": "This is a platform error - a certificate was used by an Azure component in a way that Azure AD does not support."
    },
    {
        "Error Code": "900059",
        "Message": "You must request the hybrid SPA auth code on your confidential client back-end, while redeeming the original auth code requested for a web type redirect URI. Auth codes obtained for the Pairwise broker flow cannot be redeemed for a hybrid SPA authorization code."
    },
    {
        "Error Code": "900101",
        "Message": "Unable to create default encryption algorithm: {algoName}."
    },
    {
        "Error Code": "900102",
        "Message": "'{algoName}' algorithm not supported."
    },
    {
        "Error Code": "900103",
        "Message": "The digest algorithm '{algoName}' is not supported."
    },
    {
        "Error Code": "900104",
        "Message": "Lifetime must be greater than or equal to TimeSpan.Zero."
    },
    {
        "Error Code": "900105",
        "Message": "The token signing digest algorithm '{algoName}' requested by the application is not supported for this type of token. This indicates the application is misconfigured."
    },
    {
        "Error Code": "900106",
        "Message": "The '{name}' input type is not supported for the transform."
    },
    {
        "Error Code": "900107",
        "Message": "The exclusive canonicalization transform does not support the '{algoName}' algorithm."
    },
    {
        "Error Code": "900108",
        "Message": "{name} implementation not supported."
    },
    {
        "Error Code": "900109",
        "Message": "Cannot create a signature deformatter for the requested algorithm."
    },
    {
        "Error Code": "900143",
        "Message": "'{name}' is required for the '{type}' grant type."
    },
    {
        "Error Code": "900144",
        "Message": "The request body must contain the following parameter: '{name}'.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "900161",
        "Message": "Invalid access token. Required tenant ID claim is missing."
    },
    {
        "Error Code": "900191",
        "Message": "The 'client_credentials' grant type requires a tenant to be specified."
    },
    {
        "Error Code": "900192",
        "Message": "Unable to determine the tenant identifier from the request. Client ID '{id}' does not specify a tenant realm."
    },
    {
        "Error Code": "900193",
        "Message": "The 'urn:microsoft.com:grant-type:device:credentials' grant type requires a tenant to be specified."
    },
    {
        "Error Code": "900194",
        "Message": "Unable to determine the tenant identifier from the request. Token audience '{audienceSpn}' does not specify a tenant realm."
    },
    {
        "Error Code": "900195",
        "Message": "Unable to determine the tenant identifier from the request. Token audience '{audienceSpn}' is not valid."
    },
    {
        "Error Code": "900231",
        "Message": "Unable to authenticate the user."
    },
    {
        "Error Code": "900232",
        "Message": "Request specified an authentication method '{authRequirementInRequest}' that is not in the allowed list of authentication methods supported by application '{appName}'."
    },
    {
        "Error Code": "900233",
        "Message": "The SAML AuthnRequest or LogoutRequest must specify an Issuer."
    },
    {
        "Error Code": "900234",
        "Message": "The SAML AuthnRequest or LogoutRequest must specify the default Issuer Format '{expectedIssuerFormat}'. Received Issuer Format: '{receivedIssuerFormat}'."
    },
    {
        "Error Code": "900235",
        "Message": "SAML authentication request's RequestedAuthenticationContext Comparison value must be 'exact'. Received value: '{samlComparison}'."
    },
    {
        "Error Code": "900236",
        "Message": "The SAML authentication request property '{propertyName}' is not supported and must not be set."
    },
    {
        "Error Code": "900237",
        "Message": "AssertionConsumerServiceIndex cannot be set when ProtocolBinding or AssertionConsumerServiceUrl are set."
    },
    {
        "Error Code": "900238",
        "Message": "AssertionConsumerServiceUrl cannot be set when AssertionConsumerServiceIndex is set."
    },
    {
        "Error Code": "900239",
        "Message": "ProtocolBinding cannot be set when AssertionConsumerServiceIndex is set."
    },
    {
        "Error Code": "900281",
        "Message": "Principal name format is invalid. Realm component of the name cannot be empty."
    },
    {
        "Error Code": "900282",
        "Message": "Principal name format is invalid for name '{name}'. Expected primary[@realm]."
    },
    {
        "Error Code": "900381",
        "Message": "Request redirection failed. Tenant '{tenant_name}' specified belongs to the National Cloud '{tenant_cloud}', but Current Cloud Instance '{current_cloud}' does not federate with '{tenant_cloud}'."
    },
    {
        "Error Code": "900382",
        "Message": "Confidential Client is not supported in Cross Cloud request."
    },
    {
        "Error Code": "900383",
        "Message": "Internal error has occurred during a redirect. Please login directly to your National Cloud dedicated portal."
    },
    {
        "Error Code": "900384",
        "Message": "JWT token failed signature validation. Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "900385",
        "Message": "JWT token must be signed."
    },
    {
        "Error Code": "900386",
        "Message": "WsFederation metadata request for Tenant '{tenantName}' must be made on Cloud '{cloud}'."
    },
    {
        "Error Code": "900387",
        "Message": "Unsupported version '{apiVersion}' specified in discovery request"
    },
    {
        "Error Code": "900388",
        "Message": "Http request to national cloud failed with time out error"
    },
    {
        "Error Code": "900410",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "900421",
        "Message": "Actual message content is runtime specific. Please see returned exception message for details."
    },
    {
        "Error Code": "900431",
        "Message": "National Cloud Federation or Proxy Request feature is disabled."
    },
    {
        "Error Code": "900432",
        "Message": "Confidential Client is not supported in Cross Cloud request."
    },
    {
        "Error Code": "900433",
        "Message": "Invalid National Cloud Token."
    },
    {
        "Error Code": "900434",
        "Message": "National Cloud request processing failed: {details}"
    },
    {
        "Error Code": "900435",
        "Message": "Received Empty OAuth response from National Cloud: {name}."
    },
    {
        "Error Code": "900436",
        "Message": "Invalid request method {name} received."
    },
    {
        "Error Code": "900437",
        "Message": "Auth Code value is missing."
    },
    {
        "Error Code": "900438",
        "Message": "Refresh token value is missing."
    },
    {
        "Error Code": "900439",
        "Message": "Confidential Client requests are not supported on the public endpoint (login.microsoftonline.com) for tenants in the Azure Government cloud. Send your login requests to https://login.microsoftonline.us instead. Please see https://devblogs.microsoft.com/azuregov/azure-government-aad-authority-endpoint-update/ for more details",
        "Remediation": "Starting May 5th 2020, Azure AD began enforcing the change in login endpoints for Azure Government that was announced April 3rd, 2018. The app must be updated to sign in users to the US Government cloud instead of the public cloud."
    },
    {
        "Error Code": "900440",
        "Message": "Requests to tenants hosted in the public cloud are not supported on USGov endpoints. This user must sign into https://login.microsoftonline.com instead of https://login.microsoftonline.us. The application must send the user to the right login endpoint, usually by hosting two versions of the site (e.g. portal.azure.us and portal.azure.com)",
        "Remediation": "Starting May 5th 2020, Azure AD began enforcing the change in login endpoints for Azure Government that was announced April 3rd, 2018. Users from the public cloud cannot be signed into the US Government cloud. This is by design - those users must sign into the public cloud instead."
    },
    {
        "Error Code": "900441",
        "Message": "Requests to applications hosted in the public cloud are not supported for USGov tenants."
    },
    {
        "Error Code": "900442",
        "Message": "Requests from the public cloud user for USGov resource, and requests from USGov user for public cloud resource are not supported."
    },
    {
        "Error Code": "900443",
        "Message": "The requested endpoint {endpoint} is not supported on air-gapped cloud using public hostname. Please use hostname {hostname} instead."
    },
    {
        "Error Code": "900491",
        "Message": "Service principal '{identifier}' not found."
    },
    {
        "Error Code": "900501",
        "Message": "Json format queue length exceeds the threshold."
    },
    {
        "Error Code": "900521",
        "Message": "Static Content Manager: Has not been initialized."
    },
    {
        "Error Code": "900522",
        "Message": "You can't have an alias map to another alias."
    },
    {
        "Error Code": "900523",
        "Message": "Passed in value is not an enum - {type}."
    },
    {
        "Error Code": "900524",
        "Message": "No CDN roots configured."
    },
    {
        "Error Code": "900525",
        "Message": "Service configuration error has occurred: unable to obtain SAS certificate."
    },
    {
        "Error Code": "900561",
        "Message": "The endpoint only accepts {valid_verbs} requests. Received a {invalid_verb} request.",
        "Remediation": "This can be due to developer error, or due to users pressing the back button in their browser, triggering a bad request. It can be ignored."
    },
    {
        "Error Code": "900562",
        "Message": "Unsupported GUID resource format specified, only supported GUID formats types are '00000000000000000000000000000000' and '00000000-0000-0000-0000-000000000000'."
    },
    {
        "Error Code": "900610",
        "Message": "Non-retryable error has occurred during request to external OIDC endpoint."
    },
    {
        "Error Code": "900611",
        "Message": "Failed to parse provider metadata."
    },
    {
        "Error Code": "900612",
        "Message": "Failed to parse provider signing keys."
    },
    {
        "Error Code": "900620",
        "Message": "Token Remint endpoint generic error."
    },
    {
        "Error Code": "900621",
        "Message": "Token Remint endpoint missing signing credentials to sign tokens."
    },
    {
        "Error Code": "900622",
        "Message": "Token Remint endpoint cannot use the asserting token because of allow remint claim is not preset."
    },
    {
        "Error Code": "900623",
        "Message": "Token Remint endpoint cannot use the token because its issued at value is not valid."
    },
    {
        "Error Code": "900624",
        "Message": "Token Remint endpoint cannot use the token because asserting token signature is invalid."
    },
    {
        "Error Code": "900625",
        "Message": "Token Remint endpoint cannot use the token because asserting token type is not eligible for remint."
    },
    {
        "Error Code": "900626",
        "Message": "Token Remint endpoint cannot use the token because asserting token type has expired."
    },
    {
        "Error Code": "900627",
        "Message": "Token Remint endpoint cannot parse the request."
    },
    {
        "Error Code": "900700",
        "Message": "Security Event Token signing endpoint generic error."
    },
    {
        "Error Code": "900701",
        "Message": "Security Event Token signing endpoint received invalid request."
    },
    {
        "Error Code": "900702",
        "Message": "Security Event Token signing endpoint received SET which could not be parsed to a JWT"
    },
    {
        "Error Code": "900703",
        "Message": "Security Event Token signing endpoint received SET with null claims."
    },
    {
        "Error Code": "900704",
        "Message": "Security Event Token signing endpoint received SET with invalid issuer. Issuer: {invalidIssuer}"
    },
    {
        "Error Code": "900705",
        "Message": "Security Event Token signing endpoint received SET with invalid IssuedAt value. IssuedAt: {invalidIssuedAt}"
    },
    {
        "Error Code": "900706",
        "Message": "Security Event Token signing endpoint received SET with unexpected claims. Unexpected claims: {unexpectedClaims}"
    },
    {
        "Error Code": "900811",
        "Message": "Unsupported web method is used."
    },
    {
        "Error Code": "900812",
        "Message": "Unsupported WS-Federation message of type '{name}'."
    },
    {
        "Error Code": "900821",
        "Message": "Unsupported WS-Federation message of type '{type}'."
    },
    {
        "Error Code": "900822",
        "Message": "Requested '{type}' value is unsupported."
    },
    {
        "Error Code": "900851",
        "Message": "Unable to issue a token since user account is not provisioned yet."
    },
    {
        "Error Code": "900941",
        "Message": "Administrator consent is required. App is considered risky."
    },
    {
        "Error Code": "900942",
        "Message": "Admin consent is required in order to allow token to be issued for clients to access resource."
    },
    {
        "Error Code": "900971",
        "Message": "No reply address provided."
    },
    {
        "Error Code": "900981",
        "Message": "An admin consent request was received for a risky app."
    },
    {
        "Error Code": "901001",
        "Message": "Invalid request. The {name} request parameter value '{value}' is invalid."
    },
    {
        "Error Code": "901002",
        "Message": "The '{name}' request parameter is not supported."
    },
    {
        "Error Code": "901003",
        "Message": "Invalid request. The request contains too many encoded parameters."
    },
    {
        "Error Code": "901004",
        "Message": "Expected parameter {name} not found."
    },
    {
        "Error Code": "901005",
        "Message": "'{value}' is not a supported value for {name} parameter. Expected values are '{expectedVal}'."
    },
    {
        "Error Code": "901006",
        "Message": "The following extra parameters were found in the request and should be removed from subsequent requests: [{names}]"
    },
    {
        "Error Code": "901121",
        "Message": "No certificates found for {application}."
    },
    {
        "Error Code": "901122",
        "Message": "Application '{application}' has no encryption certificate configured."
    },
    {
        "Error Code": "901123",
        "Message": "Misconfigured application '{application}'."
    },
    {
        "Error Code": "901124",
        "Message": "Application '{application}' does not exist.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "901125",
        "Message": "Application does not exist."
    },
    {
        "Error Code": "901141",
        "Message": "Bad request - expiration time is in the past."
    },
    {
        "Error Code": "901142",
        "Message": "Bad request - requested token lifetime exceeds allowed limit."
    },
    {
        "Error Code": "901151",
        "Message": "Fallback_domain parameter is not allowed together with domain_hint."
    },
    {
        "Error Code": "901171",
        "Message": "Unable to sign in. Please sign out and sign in again with your identity provider."
    },
    {
        "Error Code": "901181",
        "Message": "Mapped Microsoft Graph permissions are not supported for application permissions."
    },
    {
        "Error Code": "901182",
        "Message": "Application '{applicationId}' must be preauthorized by Microsoft Graph for scopes '{scope}'."
    },
    {
        "Error Code": "901183",
        "Message": "The service principal with an identifier of {spIdentifier} does not exist in the directory."
    },
    {
        "Error Code": "901201",
        "Message": "This request is invalid, cannot be processed."
    },
    {
        "Error Code": "901202",
        "Message": "Device identifier in the device signature is different from the device assigned to the resource account."
    },
    {
        "Error Code": "1000000",
        "Message": "The Bind API requires the Azure AD user to also authenticate with an external IDP, which hasn't happened yet. Redirecting to external IDP.",
        "Remediation": "Expected error when the user attempts to connect a LinkedIn account to their AAD account."
    },
    {
        "Error Code": "1000001",
        "Message": "The specified bind provider '{provider}' is not supported."
    },
    {
        "Error Code": "1000002",
        "Message": "The bind completed successfully, but the user must be informed.",
        "Remediation": "This is not an error scenario, but is handled like one by Azure AD to handle certain authentication flows.  This is not an indication that anything went wrong."
    },
    {
        "Error Code": "1000003",
        "Message": "MSA redirected to ESTS for an AAD user to login."
    },
    {
        "Error Code": "1000004",
        "Message": "Values '{notAllowedValues}' are not valid for claim request '{requestedClaim}'."
    },
    {
        "Error Code": "1000005",
        "Message": "Invalid definition for external identity provider, domain is missing"
    },
    {
        "Error Code": "1000006",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Following properties are mandatory: domain, issuer URI, passive authentication URL."
    },
    {
        "Error Code": "1000007",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: The value '{url}' in the property '{urlType}' must be an absolute URL."
    },
    {
        "Error Code": "1000008",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: The value '{url}' in the property '{urlType}' must be https."
    },
    {
        "Error Code": "1000009",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Only WsFederation/SamlP protocols are allowed."
    },
    {
        "Error Code": "1000010",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Domain '{value}' is not in expected format."
    },
    {
        "Error Code": "1000011",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Issuer '{value}' is not in expected format."
    },
    {
        "Error Code": "1000012",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Domain '{value}' is a reserved value."
    },
    {
        "Error Code": "1000013",
        "Message": "Invalid definition for external identity provider with domain '{domain}'. Reason: Issuer '{value}' is a reserved value."
    },
    {
        "Error Code": "1000014",
        "Message": "Cannot issue On-Behalf-Of token for tenant '{tenant1}' as JWT bearer token was issued for '{tenant2}'."
    },
    {
        "Error Code": "1000015",
        "Message": "Direct federation users are not expected to have home tenant."
    },
    {
        "Error Code": "1000018",
        "Message": "Realm with domain '{domain}' is not an external realm."
    },
    {
        "Error Code": "1000019",
        "Message": "The provided certificate authority type '{certificateAuthorityType}' is not valid."
    },
    {
        "Error Code": "1000020",
        "Message": "The provided application '{applicationId}' may not be used on this endpoint."
    },
    {
        "Error Code": "1000021",
        "Message": "External Claims Provider unavailable: general exception."
    },
    {
        "Error Code": "1000022",
        "Message": "External Claims Provider unavailable: WebException status code '{status}'."
    },
    {
        "Error Code": "1000023",
        "Message": "The GitHub access token forwarded exceeds the configured length of '{sizeLimit}'."
    },
    {
        "Error Code": "1000024",
        "Message": "Requested claim 'ClientIpReportedByRP' should have a single and valid ip address."
    },
    {
        "Error Code": "1000025",
        "Message": "Received invalid stk_jwk."
    },
    {
        "Error Code": "1000026",
        "Message": "Received invalid Primary Refresh Token."
    },
    {
        "Error Code": "1000027",
        "Message": "Session Transport Key is not present."
    },
    {
        "Error Code": "1000028",
        "Message": "Received invalid Windows SSO Credential."
    },
    {
        "Error Code": "1000029",
        "Message": "The provided confirmation request (req_cnf or pop_jwk) is not properly formatted."
    },
    {
        "Error Code": "1000030",
        "Message": "Microsoft Account granted Refresh Token Credential is not supported on AAD tenant."
    },
    {
        "Error Code": "1000031",
        "Message": "Application {appDisplayName} cannot be accessed at this time. Contact your administrator.",
        "Remediation": "Contact your administrator for more information."
    },
    {
        "Error Code": "1000032",
        "Message": "Received invalid stk_jwk key thumbprint."
    },
    {
        "Error Code": "1000033",
        "Message": "Stk_jwk key doesn't match session transport key thumbprint specified at the beginning of the session."
    },
    {
        "Error Code": "1000034",
        "Message": "Stk_jwk key must not be submitted via x5c."
    },
    {
        "Error Code": "1000035",
        "Message": "There was an error issuing Bound RT token."
    },
    {
        "Error Code": "1000036",
        "Message": "BoundRT use as a bearer refresh token is unsupported."
    },
    {
        "Error Code": "1000037",
        "Message": "Stk_jwk thumbprint is not provided for SSO Bound RT redemption."
    },
    {
        "Error Code": "1000038",
        "Message": "Received invalid req_cnf key thumbprint."
    },
    {
        "Error Code": "1000039",
        "Message": "Req_cnf key '{kid}' doesn't match proof of possession key thumbprint specified at the beginning of the session."
    },
    {
        "Error Code": "1000101",
        "Message": "Access denied."
    },
    {
        "Error Code": "1000102",
        "Message": "Invalid request."
    },
    {
        "Error Code": "1000103",
        "Message": "Invalid request."
    },
    {
        "Error Code": "1000104",
        "Message": "Resource cloud {resourceCloud} is not allowed on identity tenant {identityTenant}."
    },
    {
        "Error Code": "1000106",
        "Message": "The provided sec-Restrict-Tenant-Access-Policy header ({headerValue}) is invalid. Please double check the format of the header and try again."
    },
    {
        "Error Code": "1000107",
        "Message": "The tenant ID {tenantId} provided in the sec-Restrict-Tenant-Access-Policy header was not found in Azure Active Directory. Please contact your administrator for assistance."
    },
    {
        "Error Code": "1000108",
        "Message": "The policy ID {policyId} provided in the sec-Restrict-Tenant-Access-Policy header did not match a policy ID in tenant {tenantName}. Please contact your administrator for assistance."
    },
    {
        "Error Code": "1000110",
        "Message": "Invalid request, identity tenant '{identityTenant}' is not allowed on resource tenant '{resourceTenant}' for cross cloud B2B call."
    },
    {
        "Error Code": "1000112",
        "Message": "Cannot issue On-Behalf-Of token for tenant '{tenant1}' as JWT bearer token was issued for '{tenant2}'."
    },
    {
        "Error Code": "1000113",
        "Message": "Non Retryable Error Occured."
    },
    {
        "Error Code": "1000114",
        "Message": "Invalid request. Endpoint does not accept requests with multiple DataCriteria items of type {dataCriteriaType}."
    },
    {
        "Error Code": "1000115",
        "Message": "Invalid request. TenantId in the URL and DataCriteria has to match."
    },
    {
        "Error Code": "1000116",
        "Message": "Invalid request. One of the ids in the PolicyObjectIds is not a valid Guid."
    },
    {
        "Error Code": "1000117",
        "Message": "Invalid request. Max policyIds count of {policyObjectIdsMaxCount} exceeded."
    },
    {
        "Error Code": "1000118",
        "Message": "Invalid request. UserId cannot be an empty Guid."
    },
    {
        "Error Code": "1000119",
        "Message": "Invalid global bloomfilter name: {name}."
    },
    {
        "Error Code": "1000202",
        "Message": "Migration to public cloud is complete for this tenant. Please use login.microsoftonline.com endpoint for this tenant."
    },
    {
        "Error Code": "1000203",
        "Message": "There’s been a change to your organization. You’ll need to sign out and sign back in to continue using this app. To learn more, refer https://go.microsoft.com/fwlink/?linkid=2150446."
    },
    {
        "Error Code": "1000401",
        "Message": "The requested tenant has been migrated to {targetCloud}."
    },
    {
        "Error Code": "1000450",
        "Message": "There is only MSA user active session and need to redirect to Msa."
    },
    {
        "Error Code": "1000460",
        "Message": "The provided x-ms-plid header value '{headerValue}' is not a properly formatted private link identifier."
    },
    {
        "Error Code": "1000461",
        "Message": "Private link data couldn't be read. Please try again."
    },
    {
        "Error Code": "1000462",
        "Message": "The specified private link was not found. If you just provisioned this private link, please wait a few minutes and try again."
    },
    {
        "Error Code": "1000463",
        "Message": "The tenant you're trying to access, '{tenantName}', is not authorized to use this private link."
    },
    {
        "Error Code": "1000464",
        "Message": "Private link data couldn't be upserted/read. Please try again."
    },
    {
        "Error Code": "1000465",
        "Message": "The required private link state could not be found."
    },
    {
        "Error Code": "1000466",
        "Message": "The provided AppID ACR value is not supported."
    },
    {
        "Error Code": "1000470",
        "Message": "The protocol {protocolId} is blocked for tenant {tenantId}. Please contact your administrator for assistance."
    },
    {
        "Error Code": "1000471",
        "Message": "The document with private link id {plid} already present associated with private link resource id {plrid}"
    },
    {
        "Error Code": "1000472",
        "Message": "Unable to parse the session store last written time {lastWrittenTime}."
    },
    {
        "Error Code": "1000473",
        "Message": "Unable to create session pointer for {sessionType} due to {reason}."
    },
    {
        "Error Code": "1000474",
        "Message": "User is creating too many freshly logged-in sessions or new refresh tokens in a short period of time. Please try again later."
    },
    {
        "Error Code": "1000501",
        "Message": "Unable to read session document from Session Store."
    },
    {
        "Error Code": "1000502",
        "Message": "The provided certificate is not within its specified validity window."
    },
    {
        "Error Code": "1000503",
        "Message": "Request contains mismatched device ids."
    },
    {
        "Error Code": "1000601",
        "Message": "This API is not currently supported."
    },
    {
        "Error Code": "1000602",
        "Message": "Action not permitted. Only managed identity service could call this API."
    },
    {
        "Error Code": "1000603",
        "Message": "Unsupported tenant provided. The tenant must be a guid."
    },
    {
        "Error Code": "1000604",
        "Message": "Invalid request parameters."
    },
    {
        "Error Code": "1000605",
        "Message": "An error occurred during certificate creation."
    },
    {
        "Error Code": "1000606",
        "Message": "A requested pass through claim is not permitted for this client."
    },
    {
        "Error Code": "1000607",
        "Message": "This API is not currently supported."
    },
    {
        "Error Code": "1000608",
        "Message": "Invalid request parameters."
    },
    {
        "Error Code": "1000701",
        "Message": "Multiple devices with the same device-name found in tenant {tenant}. Please reach out to your tenant-admin to ensure uniqueness of device display-name."
    },
    {
        "Error Code": "1000800",
        "Message": "Unsupported compound-resource format."
    },
    {
        "Error Code": "1000901",
        "Message": "The provided certificate cannot be used for requesting tokens. The value of token_not_after extension on the certificate should be greater than the current time."
    },
    {
        "Error Code": "1000902",
        "Message": "The certificate provided for authentication should contain the Authority Key Identifier (AKI) extension."
    },
    {
        "Error Code": "1000903",
        "Message": "The Authority Key Identifier extension in the provided certificate doesn't match with the Key Identifier of any available Keys used for signing the certificates."
    },
    {
        "Error Code": "1000904",
        "Message": "The Format of token_not_after extension is invalid."
    },
    {
        "Error Code": "1001000",
        "Message": "Unable to acquire certificate policy from tenant"
    },
    {
        "Error Code": "1001001",
        "Message": "Certificate policy acquired from tenant is invalid and contains no user bindings"
    },
    {
        "Error Code": "1001002",
        "Message": "Certificate policy does not contain any valid user bindings"
    },
    {
        "Error Code": "1001003",
        "Message": "Unable to acquire value specified in binding from certificate"
    },
    {
        "Error Code": "1001004",
        "Message": "Unable to create rsa key with the provided exponent and modulus"
    },
    {
        "Error Code": "1001005",
        "Message": "Invalid Request. A certificate should be provided with a non empty value."
    },
    {
        "Error Code": "1001006",
        "Message": "A transient issue occured, please try again"
    },
    {
        "Error Code": "1001007",
        "Message": "Failed to write revocation events into the storage"
    },
    {
        "Error Code": "1001008",
        "Message": "Failed to read revocation events from the storage"
    },
    {
        "Error Code": "1001010",
        "Message": "The client or resource application: {applicationId} is missing service principal in the tenant: {tenant}. See instructions here: https://go.microsoft.com/fwlink/?linkid=2167121."
    },
    {
        "Error Code": "1001011",
        "Message": "The request to proxy a call to MSA via this AAD instance is not currently supported."
    },
    {
        "Error Code": "1001012",
        "Message": "The user principal name entered does not match the user specific information from the certificate."
    },
    {
        "Error Code": "1100000",
        "Message": "Non-retryable error has occurred."
    },
    {
        "Error Code": "1300011",
        "Message": "NGC key is malformed."
    },
    {
        "Error Code": "1300012",
        "Message": "Signature key type is not provided."
    },
    {
        "Error Code": "1300041",
        "Message": "NGC key cannot be decoded."
    },
    {
        "Error Code": "1300042",
        "Message": "NGC key is not associated with a device."
    },
    {
        "Error Code": "1350001",
        "Message": "Fido assertion verification failed. Result: '{result}'"
    },
    {
        "Error Code": "1350011",
        "Message": "Key ID cannot be decoded."
    },
    {
        "Error Code": "1350101",
        "Message": "Key ID cannot be decoded."
    },
    {
        "Error Code": "1400001",
        "Message": "Request nonce is not provided."
    },
    {
        "Error Code": "1400002",
        "Message": "Request nonce is malformed."
    },
    {
        "Error Code": "1400011",
        "Message": "Session key is not provided."
    },
    {
        "Error Code": "1400012",
        "Message": "Session key type {type} is not supported."
    },
    {
        "Error Code": "1659001",
        "Message": "Unexpected error decoding the required request."
    },
    {
        "Error Code": "2190001",
        "Message": "Cannot find a certificate in the pfx."
    },
    {
        "Error Code": "2190002",
        "Message": "Cannot use the pfx."
    },
    {
        "Error Code": "2200501",
        "Message": "No cache encryption keys are available for encryption."
    },
    {
        "Error Code": "2200502",
        "Message": "No cache encryption keys are available for encryption - no key was more than 48 hours old."
    },
    {
        "Error Code": "2201001",
        "Message": "Authenc: VerifySignatureAndDecrypt failed. {ex}"
    },
    {
        "Error Code": "2300241",
        "Message": "Failed to find cached credential cert with thumbprint: {thumbPrint}."
    },
    {
        "Error Code": "5000211",
        "Message": "A tenant restrictions policy added to this request by a device or network administrator does not allow access to the resource tenant.",
        "Remediation": "The administrator of the tenant that owns this tenant restrictions policy does not allow this access. If this is not expected, that administrator should allow access by editing their cross tenant access policy."
    },
    {
        "Error Code": "5000221",
        "Message": "Access to '{tenant}' tenant is denied.",
        "Remediation": "Please contact your IT department."
    },
    {
        "Error Code": "5000222",
        "Message": "Access to '{tenant}' tenant is denied. It looks like you are trying to access a resource in Microsoft Cloud Deutschland. This organization is in the process of being decommissioned and needs to be re-created in a German datacenter region. Please see aka.ms/office365germancymove for more information, or contact deblockres@microsoft.com for assistance.",
        "Remediation": "Please contact your IT department."
    },
    {
        "Error Code": "5000610",
        "Message": "Symmetric Key Derivation Function version '{version}' is invalid."
    },
    {
        "Error Code": "5000611",
        "Message": "Symmetric Key Derivation Function version '{version}' is invalid."
    },
    {
        "Error Code": "5000810",
        "Message": "Unable to verify token signature. Signing key identifier is missing."
    },
    {
        "Error Code": "5000811",
        "Message": "Unable to verify token signature. The signing key identifier does not match any valid registered keys."
    },
    {
        "Error Code": "5000812",
        "Message": "The SAML 1.1 credential must contain exactly one or zero claims of type '{type}'."
    },
    {
        "Error Code": "5000813",
        "Message": "The SAML 1.1 credential must provide non empty value for claim of type '{type}'."
    },
    {
        "Error Code": "5000815",
        "Message": "The SAML 1.1 credential contains invalid Device ID claim."
    },
    {
        "Error Code": "5000816",
        "Message": "The SAML 1.1 credential must contain exactly one Audience in AudienceRestriction."
    },
    {
        "Error Code": "5000817",
        "Message": "The SAML 1.1 credential must contain SamlAudienceRestrictionCondition."
    },
    {
        "Error Code": "5000818",
        "Message": "SAML Assertion is invalid. NameId is not present in the token."
    },
    {
        "Error Code": "5000819",
        "Message": "SAML Assertion is invalid. Email address claim is missing or does not match domain from an external realm."
    },
    {
        "Error Code": "7000011",
        "Message": "Requested SAML 2.0 assertion has invalid SubjectConfirmation Method: {method}."
    },
    {
        "Error Code": "7000012",
        "Message": "The grant was obtained for a different tenant."
    },
    {
        "Error Code": "7000013",
        "Message": "The grant is not supported by API version {apiVersion}."
    },
    {
        "Error Code": "7000014",
        "Message": "The provided value for the input parameter 'device_code' is not valid."
    },
    {
        "Error Code": "7000015",
        "Message": "The grant was obtained for a different tenant."
    },
    {
        "Error Code": "7000016",
        "Message": "Primary refresh token is not signed with session key."
    },
    {
        "Error Code": "7000017",
        "Message": "Broker restricted refresh token can't be used as credential."
    },
    {
        "Error Code": "7000018",
        "Message": "Token binding header is empty."
    },
    {
        "Error Code": "7000019",
        "Message": "Token binding hash does not match."
    },
    {
        "Error Code": "7000020",
        "Message": "SAML 2.0 Bearer assertion must be a valid Base64Url encoded value."
    },
    {
        "Error Code": "7000021",
        "Message": "Unrecognized grant type {type}."
    },
    {
        "Error Code": "7000022",
        "Message": "VSM Binding Key missing from Ticket Granting Ticket request."
    },
    {
        "Error Code": "7000023",
        "Message": "VSM Binding key mismatch."
    },
    {
        "Error Code": "7000024",
        "Message": "Inconsistent broker application IDs asserted by incoming credentials."
    },
    {
        "Error Code": "7000025",
        "Message": "Ambiguous request. The grant contains duplicate claims."
    },
    {
        "Error Code": "7000026",
        "Message": "Provided grant is invalid or malformed. The grant requires an encrypted response, but the client is not indicating it understands encrypted responses."
    },
    {
        "Error Code": "7000110",
        "Message": "Request is ambiguous, multiple application identifiers found."
    },
    {
        "Error Code": "7000112",
        "Message": "Application '{appIdentifier}'({appName}) is disabled."
    },
    {
        "Error Code": "7000113",
        "Message": "Application '{appIdentifier}' is not authorized to make application on-behalf-of calls."
    },
    {
        "Error Code": "7000114",
        "Message": "Application '{appIdentifier}' is not allowed to make application on-behalf-of calls."
    },
    {
        "Error Code": "7000115",
        "Message": "This grant is reedemable only by broker application."
    },
    {
        "Error Code": "7000116",
        "Message": "Application '{appIdentifier}'({appName}) is disabled in tenant {tenant}. Please review the documentation: https://go.microsoft.com/fwlink/?linkid=2167553"
    },
    {
        "Error Code": "7000117",
        "Message": "Resource application '{appIdentifier}'({appName}) is disabled in tenant {tenant}. Please review the documentation: https://go.microsoft.com/fwlink/?linkid=2167553"
    },
    {
        "Error Code": "7000210",
        "Message": "Unable to find source of Trusted Certificate Authority policy."
    },
    {
        "Error Code": "7000211",
        "Message": "Trusted Certificate Authority policy is not configured on the tenant '{tenantId}'."
    },
    {
        "Error Code": "7000212",
        "Message": "No matching Trusted Certificate Authority policy found for authorized subject name."
    },
    {
        "Error Code": "7000213",
        "Message": "Invalid certificate chain."
    },
    {
        "Error Code": "7000214",
        "Message": "Certificate has been revoked."
    },
    {
        "Error Code": "7000215",
        "Message": "Invalid client secret provided. Ensure the secret being sent in the request is the client secret value, not the client secret ID, for a secret added to app '{identifier}'.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "7000216",
        "Message": "'client_assertion', 'client_secret' or 'request' is required for the 'client_credentials' grant type.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "7000217",
        "Message": "The service principal named {appPhrase} was not found in the tenant named {tenant_name}. This can happen if the application has not been installed by the administrator of the tenant."
    },
    {
        "Error Code": "7000218",
        "Message": "The request body must contain the following parameter: 'client_assertion' or 'client_secret'.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "7000219",
        "Message": "'client_assertion' or 'client_secret' is required for the '{type}' grant type."
    },
    {
        "Error Code": "7000220",
        "Message": "Client application identifier in the provided grant doesn't match 'client_id' parameter."
    },
    {
        "Error Code": "7000221",
        "Message": "Certificate Subject must match Issuer claim in the client assertion."
    },
    {
        "Error Code": "7000222",
        "Message": "The provided client secret keys for app '{identifier}' are expired. Visit the Azure portal to create new keys for your app: https://aka.ms/NewClientSecret, or consider using certificate credentials for added security: https://aka.ms/certCreds.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "7000223",
        "Message": "Application {brokerAppId} is not authorized to broker tokens."
    },
    {
        "Error Code": "7000224",
        "Message": "Application {childAppId} is not authorized to have tokens brokered on its behalf."
    },
    {
        "Error Code": "7000225",
        "Message": "Invalid credentials: An MSI certificate was included in the request for the app, but the app (object ID: {oid}, application id: {clientId}) is not an MSI. Ensure that your code is matching MSI identities and certificates appropriately.",
        "Remediation": "This is a platform error, and cannot be remediated by the app developer or admin. Consider filing a support ticket against the Azure service that is failing."
    },
    {
        "Error Code": "7000226",
        "Message": "No federated identity credential policy found on application ({appid}). The client_assertion used to authenticate the request does not match the subject or application being requested.  Ensure that the application ID in the request is correct, that the app has a policy applied to it, and that the correct client_assertion is being provided in the request.",
        "Remediation": "The request attempted to use a credential from one service to authenticate as another service, which requires a federated identity credential to be in place. The application ID in the request does not have a federated credentials policy applied to it, so the request was rejected. Ensure that the app has a policy applied to it, and that the developer intended to perform a cross-service authentication."
    },
    {
        "Error Code": "7000227",
        "Message": "No Federated Identity Credential policy found on application that matched the presented MSI-signed client assertion. Expecting a Federated Identity Credential with subject: '{msiSpid}', issuer: '{expectedIssuer}' and audience: '{expectedAudience}'.",
        "Remediation": "Ensure that the federated identity credential policy on the application matches the expected values."
    },
    {
        "Error Code": "7000281",
        "Message": "Certificate with thumbprint {thumbprint} is not authorized.",
        "Remediation": "Developer error - the app is attempting to sign in without the necessary or correct authentication parameters."
    },
    {
        "Error Code": "7000361",
        "Message": "Client assertion claim '{claimName}' can only contain a maximum of '{maxItems}' items."
    },
    {
        "Error Code": "7000471",
        "Message": "A reply address scheme starting with 'brk-' was seen on a request that wasn't for brokering. This scheme is reserved for brokered application requests. Use a valid reply URI instead, either a native app reply URI or an https:// uri.",
        "Remediation": "The app sent an inappropriate reply URI on this request. The app should be updated to provide a reply URI that is supported for their flow (https:// or a native app URI)"
    },
    {
        "Error Code": "7500110",
        "Message": "The query string hash could not be computed for signature generation/validation. Signature algorithm was not specified."
    },
    {
        "Error Code": "7500111",
        "Message": "The query string hash could not be computed for signature generation/validation. Cannot create a SAML binding message from the given HttpRequest parameters. Check if the request contains a valid Uri or Form POST that contains protocol parameters for SAML HTTP bindings."
    },
    {
        "Error Code": "7500112",
        "Message": "MessageType property get is not supported by this class."
    },
    {
        "Error Code": "7500510",
        "Message": "XML attribute '{attributeName}' in the SAML message must be a dateTime."
    },
    {
        "Error Code": "7500511",
        "Message": "XML attribute '{attributeName}' in the SAML message must be a URI."
    },
    {
        "Error Code": "7500512",
        "Message": "XML element '{elementName}' in XML namespace '{xmlNamespace}' was not expected in the SAML message. Either the element is not an expected part of a SAML message or was in the wrong location in the message. Check the names and ordering of the elements to confirm they conform to the SAML protocol specifications."
    },
    {
        "Error Code": "7500513",
        "Message": "The message type '{messageType}' is not a supported type of SAML request. Supported SAML requests are AuthnRequest and LogoutRequest."
    },
    {
        "Error Code": "7500514",
        "Message": "A supported type of SAML response was not found. The supported response types are 'Response' (in XML namespace 'urn:oasis:names:tc:SAML:2.0:protocol') or 'Assertion' (in XML namespace 'urn:oasis:names:tc:SAML:2.0:assertion').",
        "Remediation": "Application error - the developer will handle this error."
    },
    {
        "Error Code": "7500515",
        "Message": "Was expecting to find XML element '{xmlElement}' in XML namespace '{xmlNamespace}', but it was not present. Either the expected element is not present or was in the wrong location in the message. Check the names and ordering of the elements to confirm they conform to the SAML protocol specifications."
    },
    {
        "Error Code": "7500516",
        "Message": "A required attribute is not present in the SAML message: '{xmlAttribute}'."
    },
    {
        "Error Code": "7500517",
        "Message": "The element '{xmlElement}' in XML namespace '{xmlNamespace}' cannot be empty."
    },
    {
        "Error Code": "7500518",
        "Message": "The specified comparison '{comparison}' is not a supported value for samlp:AuthnContextComparisonType."
    },
    {
        "Error Code": "7500519",
        "Message": "An unsupported SAML version was encountered: {version}."
    },
    {
        "Error Code": "7500520",
        "Message": "Unrecognized XML content of type '{nodeType}', name '{name}' was found at the beginning of the the SAML message. Expected to find an element 'AuthnRequest', 'Response', 'LogoutRequest' or 'LogoutResponse' from XML namespace 'urn:oasis:names:tc:SAML:2.0:protocol'."
    },
    {
        "Error Code": "7500521",
        "Message": "Unrecognized XML content of type '{nodeType}' was found at the beginning of the the SAML message. Expected to find an element 'AuthnRequest', 'Response', 'LogoutRequest' or 'LogoutResponse' from XML namespace 'urn:oasis:names:tc:SAML:2.0:protocol'."
    },
    {
        "Error Code": "7500522",
        "Message": "XML element '{xmlElement}' in XML namespace '{xmlNamespace}' in the SAML message must be a URI."
    },
    {
        "Error Code": "7500523",
        "Message": "The SAML IDPList must contain one or more IDPEntry elements."
    },
    {
        "Error Code": "7500524",
        "Message": "No saml:AuthnContextClassRef or saml:AuthnContextDeclRefs elements were found within samlp:RequestedAuthnContext."
    },
    {
        "Error Code": "7500525",
        "Message": "There was an XML error in the SAML message at line {lineNumber}, position {linePosition}. Verify that the XML content of the SAML messages conforms to the SAML protocol specifications."
    },
    {
        "Error Code": "7500526",
        "Message": "The value '{value}' must be nonnegative."
    },
    {
        "Error Code": "7500527",
        "Message": "The value '{value}' must be nonnegative and less than or equal to 65535."
    },
    {
        "Error Code": "7500528",
        "Message": "Unexpected xsi:type: '{message}'"
    },
    {
        "Error Code": "7500529",
        "Message": "The value '{value}' is not a valid SAML ID. The ID must not begin with a number.",
        "Remediation": "Azure AD uses this attribute to populate the InResponseTo attribute of the returned response. The ID must not begin with a number, so a common strategy is to prepend a string like id to the string representation of a GUID. For example, id6c1c178c166d486687be4aaf5e482730 is a valid ID."
    },
    {
        "Error Code": "7500530",
        "Message": "SAML NameId cannot be null."
    },
    {
        "Error Code": "7500531",
        "Message": "The end of an XML element was expected, but instead XML content of type '{nodeType}', name '{name}' was found. XML content may be present that is not defined in the SAML protocol specifications."
    },
    {
        "Error Code": "7500532",
        "Message": "The end of an XML element was expected, but instead XML content of type '{nodeType}' was found. XML content may be present that is not defined in the SAML protocol specifications."
    },
    {
        "Error Code": "7500533",
        "Message": "The SAML response was expected to start with either a Response element or a LogoutResponse element, from the XML namespace 'urn:oasis:names:tc:SAML:2.0:protocol'."
    },
    {
        "Error Code": "7500534",
        "Message": "Exactly one saml:AuthnContextClassRef or saml:AuthnContextDeclRefs element is expected in the samlp:RequestedAuthnContext."
    },
    {
        "Error Code": "9000410",
        "Message": "Malformed JSON."
    },
    {
        "Error Code": "9000411",
        "Message": "The request is not properly formatted. The parameter '{name}' is duplicated."
    },
    {
        "Error Code": "9000412",
        "Message": "The request is missing a key."
    },
    {
        "Error Code": "9000413",
        "Message": "'Context' field is required."
    },
    {
        "Error Code": "9000414",
        "Message": "Malformed request."
    },
    {
        "Error Code": "9000510",
        "Message": "Hybrid SPA authorization codes cannot be requested on the app-only flow."
    },
    {
        "Error Code": "9000511",
        "Message": "Cannot emit Hybrid SPA auth code for Public or SPA client.  You must request the hybrid SPA auth code on your confidential client back-end, while redeeming the original auth code requested for a web type redirect URI."
    },
    {
        "Error Code": "9000512",
        "Message": "A Hybrid SPA code can only be requested while redeeming a confidential client authorization code (a code issued to a web-type redirect URI). Do not request a hybrid code otherwise."
    }
]
